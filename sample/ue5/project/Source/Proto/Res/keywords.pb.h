// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keywords.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_keywords_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_keywords_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tsv2pb.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_keywords_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_keywords_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_keywords_2eproto;
namespace RES {
class ResReward;
struct ResRewardDefaultTypeInternal;
extern ResRewardDefaultTypeInternal _ResReward_default_instance_;
}  // namespace RES
PROTOBUF_NAMESPACE_OPEN
template<> ::RES::ResReward* Arena::CreateMaybeMessage<::RES::ResReward>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RES {

enum ItemType : int {
  ItemType_invalid = 0,
  ItemType_coin = 1,
  ItemType_diamond = 2,
  ItemType_exp = 3,
  ItemType_enenry = 4,
  ItemType_achievement_point = 5,
  ItemType_fish = 6,
  ItemType_flower = 7,
  ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ItemType_IsValid(int value);
constexpr ItemType ItemType_MIN = ItemType_invalid;
constexpr ItemType ItemType_MAX = ItemType_flower;
constexpr int ItemType_ARRAYSIZE = ItemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor();
template<typename T>
inline const std::string& ItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemType_descriptor(), enum_t_value);
}
inline bool ItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ItemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemType>(
    ItemType_descriptor(), name, value);
}
enum UnlockFunction : int {
  UnlockFunction_Invalid = 0,
  UnlockFunction_Task = 1,
  UnlockFunction_FreeDiamond = 2,
  UnlockFunction_FreeBox = 3,
  UnlockFunction_FreeGift = 4,
  UnlockFunction_RemoveClerk = 5,
  UnlockFunction_WeakTip = 6,
  UnlockFunction_VipGame = 7,
  UnlockFunction_AutoGuest = 8,
  UnlockFunction_Homeworld = 9,
  UnlockFunction_DailyTask = 10,
  UnlockFunction_Flowerbed1 = 11,
  UnlockFunction_Flowerbed2 = 12,
  UnlockFunction_Flowerbed3 = 13,
  UnlockFunction_Flowerbed4 = 14,
  UnlockFunction_Pet = 15,
  UnlockFunction_Fish = 16,
  UnlockFunction_ShopClose = 17,
  UnlockFunction_GiftCode = 20,
  UnlockFunction_Achievement = 21,
  UnlockFunction_HomeMore = 22,
  UnlockFunction_Roulette = 23,
  UnlockFunction_SignIn = 24,
  UnlockFunction_Home2 = 25,
  UnlockFunction_GuestCollect = 26,
  UnlockFunction_DeleteGuestEffect = 27,
  UnlockFunction_Decoration = 29,
  UnlockFunction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UnlockFunction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UnlockFunction_IsValid(int value);
constexpr UnlockFunction UnlockFunction_MIN = UnlockFunction_Invalid;
constexpr UnlockFunction UnlockFunction_MAX = UnlockFunction_Decoration;
constexpr int UnlockFunction_ARRAYSIZE = UnlockFunction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnlockFunction_descriptor();
template<typename T>
inline const std::string& UnlockFunction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UnlockFunction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UnlockFunction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UnlockFunction_descriptor(), enum_t_value);
}
inline bool UnlockFunction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UnlockFunction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UnlockFunction>(
    UnlockFunction_descriptor(), name, value);
}
// ===================================================================

class ResReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RES.ResReward) */ {
 public:
  inline ResReward() : ResReward(nullptr) {}
  ~ResReward() override;
  explicit constexpr ResReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResReward(const ResReward& from);
  ResReward(ResReward&& from) noexcept
    : ResReward() {
    *this = ::std::move(from);
  }

  inline ResReward& operator=(const ResReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResReward& operator=(ResReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResReward* internal_default_instance() {
    return reinterpret_cast<const ResReward*>(
               &_ResReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResReward& a, ResReward& b) {
    a.Swap(&b);
  }
  inline void Swap(ResReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResReward* New() const final {
    return CreateMaybeMessage<ResReward>(nullptr);
  }

  ResReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResReward& from);
  void MergeFrom(const ResReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RES.ResReward";
  }
  protected:
  explicit ResReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 1,
    kTypeFieldNumber = 2,
    kProportionFieldNumber = 3,
  };
  // int32 weight = 1 [(.field) = "\346\235\203\351\207\215"];
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::int32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .RES.ItemType type = 2 [(.field) = "\347\261\273\345\236\213"];
  void clear_type();
  ::RES::ItemType type() const;
  void set_type(::RES::ItemType value);
  private:
  ::RES::ItemType _internal_type() const;
  void _internal_set_type(::RES::ItemType value);
  public:

  // int32 proportion = 3 [(.field) = "\346\257\224\344\276\213"];
  void clear_proportion();
  ::PROTOBUF_NAMESPACE_ID::int32 proportion() const;
  void set_proportion(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_proportion() const;
  void _internal_set_proportion(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RES.ResReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 weight_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 proportion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_keywords_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResReward

// int32 weight = 1 [(.field) = "\346\235\203\351\207\215"];
inline void ResReward::clear_weight() {
  weight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResReward::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResReward::weight() const {
  // @@protoc_insertion_point(field_get:RES.ResReward.weight)
  return _internal_weight();
}
inline void ResReward::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weight_ = value;
}
inline void ResReward::set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:RES.ResReward.weight)
}

// .RES.ItemType type = 2 [(.field) = "\347\261\273\345\236\213"];
inline void ResReward::clear_type() {
  type_ = 0;
}
inline ::RES::ItemType ResReward::_internal_type() const {
  return static_cast< ::RES::ItemType >(type_);
}
inline ::RES::ItemType ResReward::type() const {
  // @@protoc_insertion_point(field_get:RES.ResReward.type)
  return _internal_type();
}
inline void ResReward::_internal_set_type(::RES::ItemType value) {
  
  type_ = value;
}
inline void ResReward::set_type(::RES::ItemType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RES.ResReward.type)
}

// int32 proportion = 3 [(.field) = "\346\257\224\344\276\213"];
inline void ResReward::clear_proportion() {
  proportion_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResReward::_internal_proportion() const {
  return proportion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResReward::proportion() const {
  // @@protoc_insertion_point(field_get:RES.ResReward.proportion)
  return _internal_proportion();
}
inline void ResReward::_internal_set_proportion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  proportion_ = value;
}
inline void ResReward::set_proportion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_proportion(value);
  // @@protoc_insertion_point(field_set:RES.ResReward.proportion)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace RES

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RES::ItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RES::ItemType>() {
  return ::RES::ItemType_descriptor();
}
template <> struct is_proto_enum< ::RES::UnlockFunction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RES::UnlockFunction>() {
  return ::RES::UnlockFunction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_keywords_2eproto
