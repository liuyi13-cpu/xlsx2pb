// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tsv2pb.pb.h"
#include "keywords.pb.h"
#include "keywords_client.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace RES {
class ResErrorCode;
struct ResErrorCodeDefaultTypeInternal;
extern ResErrorCodeDefaultTypeInternal _ResErrorCode_default_instance_;
class ResErrorCodeArray;
struct ResErrorCodeArrayDefaultTypeInternal;
extern ResErrorCodeArrayDefaultTypeInternal _ResErrorCodeArray_default_instance_;
class ResSprite;
struct ResSpriteDefaultTypeInternal;
extern ResSpriteDefaultTypeInternal _ResSprite_default_instance_;
class ResSpriteArray;
struct ResSpriteArrayDefaultTypeInternal;
extern ResSpriteArrayDefaultTypeInternal _ResSpriteArray_default_instance_;
}  // namespace RES
PROTOBUF_NAMESPACE_OPEN
template<> ::RES::ResErrorCode* Arena::CreateMaybeMessage<::RES::ResErrorCode>(Arena*);
template<> ::RES::ResErrorCodeArray* Arena::CreateMaybeMessage<::RES::ResErrorCodeArray>(Arena*);
template<> ::RES::ResSprite* Arena::CreateMaybeMessage<::RES::ResSprite>(Arena*);
template<> ::RES::ResSpriteArray* Arena::CreateMaybeMessage<::RES::ResSpriteArray>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RES {

// ===================================================================

class ResSprite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RES.ResSprite) */ {
 public:
  inline ResSprite() : ResSprite(nullptr) {}
  ~ResSprite() override;
  explicit constexpr ResSprite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResSprite(const ResSprite& from);
  ResSprite(ResSprite&& from) noexcept
    : ResSprite() {
    *this = ::std::move(from);
  }

  inline ResSprite& operator=(const ResSprite& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResSprite& operator=(ResSprite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResSprite& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResSprite* internal_default_instance() {
    return reinterpret_cast<const ResSprite*>(
               &_ResSprite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResSprite& a, ResSprite& b) {
    a.Swap(&b);
  }
  inline void Swap(ResSprite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResSprite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResSprite* New() const final {
    return CreateMaybeMessage<ResSprite>(nullptr);
  }

  ResSprite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResSprite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResSprite& from);
  void MergeFrom(const ResSprite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResSprite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RES.ResSprite";
  }
  protected:
  explicit ResSprite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPathFieldNumber = 2,
    kSuffixFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string id = 1 [(.field) = "\345\220\215\345\255\227"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string path = 2 [(.field) = "\350\267\257\345\276\204"];
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string suffix = 3 [(.field) = "\345\220\216\347\274\200"];
  void clear_suffix();
  const std::string& suffix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_suffix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_suffix();
  std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);
  private:
  const std::string& _internal_suffix() const;
  void _internal_set_suffix(const std::string& value);
  std::string* _internal_mutable_suffix();
  public:

  // int32 type = 4 [(.field) = "\347\261\273\345\236\213"];
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RES.ResSprite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ResSpriteArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RES.ResSpriteArray) */ {
 public:
  inline ResSpriteArray() : ResSpriteArray(nullptr) {}
  ~ResSpriteArray() override;
  explicit constexpr ResSpriteArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResSpriteArray(const ResSpriteArray& from);
  ResSpriteArray(ResSpriteArray&& from) noexcept
    : ResSpriteArray() {
    *this = ::std::move(from);
  }

  inline ResSpriteArray& operator=(const ResSpriteArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResSpriteArray& operator=(ResSpriteArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResSpriteArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResSpriteArray* internal_default_instance() {
    return reinterpret_cast<const ResSpriteArray*>(
               &_ResSpriteArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResSpriteArray& a, ResSpriteArray& b) {
    a.Swap(&b);
  }
  inline void Swap(ResSpriteArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResSpriteArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResSpriteArray* New() const final {
    return CreateMaybeMessage<ResSpriteArray>(nullptr);
  }

  ResSpriteArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResSpriteArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResSpriteArray& from);
  void MergeFrom(const ResSpriteArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResSpriteArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RES.ResSpriteArray";
  }
  protected:
  explicit ResSpriteArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .RES.ResSprite items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::RES::ResSprite* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RES::ResSprite >*
      mutable_items();
  private:
  const ::RES::ResSprite& _internal_items(int index) const;
  ::RES::ResSprite* _internal_add_items();
  public:
  const ::RES::ResSprite& items(int index) const;
  ::RES::ResSprite* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RES::ResSprite >&
      items() const;

  // @@protoc_insertion_point(class_scope:RES.ResSpriteArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RES::ResSprite > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ResErrorCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RES.ResErrorCode) */ {
 public:
  inline ResErrorCode() : ResErrorCode(nullptr) {}
  ~ResErrorCode() override;
  explicit constexpr ResErrorCode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResErrorCode(const ResErrorCode& from);
  ResErrorCode(ResErrorCode&& from) noexcept
    : ResErrorCode() {
    *this = ::std::move(from);
  }

  inline ResErrorCode& operator=(const ResErrorCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResErrorCode& operator=(ResErrorCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResErrorCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResErrorCode* internal_default_instance() {
    return reinterpret_cast<const ResErrorCode*>(
               &_ResErrorCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResErrorCode& a, ResErrorCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResErrorCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResErrorCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResErrorCode* New() const final {
    return CreateMaybeMessage<ResErrorCode>(nullptr);
  }

  ResErrorCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResErrorCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResErrorCode& from);
  void MergeFrom(const ResErrorCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResErrorCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RES.ResErrorCode";
  }
  protected:
  explicit ResErrorCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kTextFieldNumber = 3,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 4,
  };
  // string title = 2 [(.field) = "\346\240\207\351\242\230"];
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string text = 3 [(.field) = "\346\226\207\346\234\254"];
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int32 id = 1 [(.field) = "\351\224\231\350\257\257\347\240\201"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 4 [(.field) = "\347\261\273\345\236\213"];
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RES.ResErrorCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ResErrorCodeArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RES.ResErrorCodeArray) */ {
 public:
  inline ResErrorCodeArray() : ResErrorCodeArray(nullptr) {}
  ~ResErrorCodeArray() override;
  explicit constexpr ResErrorCodeArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResErrorCodeArray(const ResErrorCodeArray& from);
  ResErrorCodeArray(ResErrorCodeArray&& from) noexcept
    : ResErrorCodeArray() {
    *this = ::std::move(from);
  }

  inline ResErrorCodeArray& operator=(const ResErrorCodeArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResErrorCodeArray& operator=(ResErrorCodeArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResErrorCodeArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResErrorCodeArray* internal_default_instance() {
    return reinterpret_cast<const ResErrorCodeArray*>(
               &_ResErrorCodeArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResErrorCodeArray& a, ResErrorCodeArray& b) {
    a.Swap(&b);
  }
  inline void Swap(ResErrorCodeArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResErrorCodeArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResErrorCodeArray* New() const final {
    return CreateMaybeMessage<ResErrorCodeArray>(nullptr);
  }

  ResErrorCodeArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResErrorCodeArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResErrorCodeArray& from);
  void MergeFrom(const ResErrorCodeArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResErrorCodeArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RES.ResErrorCodeArray";
  }
  protected:
  explicit ResErrorCodeArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .RES.ResErrorCode items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::RES::ResErrorCode* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RES::ResErrorCode >*
      mutable_items();
  private:
  const ::RES::ResErrorCode& _internal_items(int index) const;
  ::RES::ResErrorCode* _internal_add_items();
  public:
  const ::RES::ResErrorCode& items(int index) const;
  ::RES::ResErrorCode* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RES::ResErrorCode >&
      items() const;

  // @@protoc_insertion_point(class_scope:RES.ResErrorCodeArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RES::ResErrorCode > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResSprite

// string id = 1 [(.field) = "\345\220\215\345\255\227"];
inline void ResSprite::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ResSprite::id() const {
  // @@protoc_insertion_point(field_get:RES.ResSprite.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ResSprite::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:RES.ResSprite.id)
}
inline std::string* ResSprite::mutable_id() {
  // @@protoc_insertion_point(field_mutable:RES.ResSprite.id)
  return _internal_mutable_id();
}
inline const std::string& ResSprite::_internal_id() const {
  return id_.Get();
}
inline void ResSprite::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ResSprite::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResSprite::release_id() {
  // @@protoc_insertion_point(field_release:RES.ResSprite.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResSprite::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RES.ResSprite.id)
}

// string path = 2 [(.field) = "\350\267\257\345\276\204"];
inline void ResSprite::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& ResSprite::path() const {
  // @@protoc_insertion_point(field_get:RES.ResSprite.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ResSprite::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:RES.ResSprite.path)
}
inline std::string* ResSprite::mutable_path() {
  // @@protoc_insertion_point(field_mutable:RES.ResSprite.path)
  return _internal_mutable_path();
}
inline const std::string& ResSprite::_internal_path() const {
  return path_.Get();
}
inline void ResSprite::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ResSprite::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResSprite::release_path() {
  // @@protoc_insertion_point(field_release:RES.ResSprite.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResSprite::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RES.ResSprite.path)
}

// string suffix = 3 [(.field) = "\345\220\216\347\274\200"];
inline void ResSprite::clear_suffix() {
  suffix_.ClearToEmpty();
}
inline const std::string& ResSprite::suffix() const {
  // @@protoc_insertion_point(field_get:RES.ResSprite.suffix)
  return _internal_suffix();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ResSprite::set_suffix(ArgT0&& arg0, ArgT... args) {
 
 suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:RES.ResSprite.suffix)
}
inline std::string* ResSprite::mutable_suffix() {
  // @@protoc_insertion_point(field_mutable:RES.ResSprite.suffix)
  return _internal_mutable_suffix();
}
inline const std::string& ResSprite::_internal_suffix() const {
  return suffix_.Get();
}
inline void ResSprite::_internal_set_suffix(const std::string& value) {
  
  suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ResSprite::_internal_mutable_suffix() {
  
  return suffix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResSprite::release_suffix() {
  // @@protoc_insertion_point(field_release:RES.ResSprite.suffix)
  return suffix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResSprite::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    
  } else {
    
  }
  suffix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suffix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RES.ResSprite.suffix)
}

// int32 type = 4 [(.field) = "\347\261\273\345\236\213"];
inline void ResSprite::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResSprite::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResSprite::type() const {
  // @@protoc_insertion_point(field_get:RES.ResSprite.type)
  return _internal_type();
}
inline void ResSprite::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void ResSprite::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RES.ResSprite.type)
}

// -------------------------------------------------------------------

// ResSpriteArray

// repeated .RES.ResSprite items = 1;
inline int ResSpriteArray::_internal_items_size() const {
  return items_.size();
}
inline int ResSpriteArray::items_size() const {
  return _internal_items_size();
}
inline void ResSpriteArray::clear_items() {
  items_.Clear();
}
inline ::RES::ResSprite* ResSpriteArray::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:RES.ResSpriteArray.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RES::ResSprite >*
ResSpriteArray::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:RES.ResSpriteArray.items)
  return &items_;
}
inline const ::RES::ResSprite& ResSpriteArray::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::RES::ResSprite& ResSpriteArray::items(int index) const {
  // @@protoc_insertion_point(field_get:RES.ResSpriteArray.items)
  return _internal_items(index);
}
inline ::RES::ResSprite* ResSpriteArray::_internal_add_items() {
  return items_.Add();
}
inline ::RES::ResSprite* ResSpriteArray::add_items() {
  // @@protoc_insertion_point(field_add:RES.ResSpriteArray.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RES::ResSprite >&
ResSpriteArray::items() const {
  // @@protoc_insertion_point(field_list:RES.ResSpriteArray.items)
  return items_;
}

// -------------------------------------------------------------------

// ResErrorCode

// int32 id = 1 [(.field) = "\351\224\231\350\257\257\347\240\201"];
inline void ResErrorCode::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResErrorCode::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResErrorCode::id() const {
  // @@protoc_insertion_point(field_get:RES.ResErrorCode.id)
  return _internal_id();
}
inline void ResErrorCode::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ResErrorCode::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RES.ResErrorCode.id)
}

// string title = 2 [(.field) = "\346\240\207\351\242\230"];
inline void ResErrorCode::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& ResErrorCode::title() const {
  // @@protoc_insertion_point(field_get:RES.ResErrorCode.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ResErrorCode::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:RES.ResErrorCode.title)
}
inline std::string* ResErrorCode::mutable_title() {
  // @@protoc_insertion_point(field_mutable:RES.ResErrorCode.title)
  return _internal_mutable_title();
}
inline const std::string& ResErrorCode::_internal_title() const {
  return title_.Get();
}
inline void ResErrorCode::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ResErrorCode::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResErrorCode::release_title() {
  // @@protoc_insertion_point(field_release:RES.ResErrorCode.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResErrorCode::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RES.ResErrorCode.title)
}

// string text = 3 [(.field) = "\346\226\207\346\234\254"];
inline void ResErrorCode::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& ResErrorCode::text() const {
  // @@protoc_insertion_point(field_get:RES.ResErrorCode.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ResErrorCode::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:RES.ResErrorCode.text)
}
inline std::string* ResErrorCode::mutable_text() {
  // @@protoc_insertion_point(field_mutable:RES.ResErrorCode.text)
  return _internal_mutable_text();
}
inline const std::string& ResErrorCode::_internal_text() const {
  return text_.Get();
}
inline void ResErrorCode::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ResErrorCode::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResErrorCode::release_text() {
  // @@protoc_insertion_point(field_release:RES.ResErrorCode.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResErrorCode::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RES.ResErrorCode.text)
}

// int32 type = 4 [(.field) = "\347\261\273\345\236\213"];
inline void ResErrorCode::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResErrorCode::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResErrorCode::type() const {
  // @@protoc_insertion_point(field_get:RES.ResErrorCode.type)
  return _internal_type();
}
inline void ResErrorCode::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void ResErrorCode::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RES.ResErrorCode.type)
}

// -------------------------------------------------------------------

// ResErrorCodeArray

// repeated .RES.ResErrorCode items = 1;
inline int ResErrorCodeArray::_internal_items_size() const {
  return items_.size();
}
inline int ResErrorCodeArray::items_size() const {
  return _internal_items_size();
}
inline void ResErrorCodeArray::clear_items() {
  items_.Clear();
}
inline ::RES::ResErrorCode* ResErrorCodeArray::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:RES.ResErrorCodeArray.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RES::ResErrorCode >*
ResErrorCodeArray::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:RES.ResErrorCodeArray.items)
  return &items_;
}
inline const ::RES::ResErrorCode& ResErrorCodeArray::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::RES::ResErrorCode& ResErrorCodeArray::items(int index) const {
  // @@protoc_insertion_point(field_get:RES.ResErrorCodeArray.items)
  return _internal_items(index);
}
inline ::RES::ResErrorCode* ResErrorCodeArray::_internal_add_items() {
  return items_.Add();
}
inline ::RES::ResErrorCode* ResErrorCodeArray::add_items() {
  // @@protoc_insertion_point(field_add:RES.ResErrorCodeArray.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RES::ResErrorCode >&
ResErrorCodeArray::items() const {
  // @@protoc_insertion_point(field_list:RES.ResErrorCodeArray.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RES

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
