// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keywords_client.proto

#include "keywords_client.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace RES {
}  // namespace RES
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_keywords_5fclient_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_keywords_5fclient_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_keywords_5fclient_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_keywords_5fclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025keywords_client.proto\022\003RES\032\014tsv2pb.pro"
  "to\032\016keywords.proto*L\n\nkBlockType\022\032\n\020kBLO"
  "CK_BIND_NONE\020\000\032\004\212\323\016\000\022\"\n\022kBLOCK_TYPE_NORM"
  "AL\020\001\032\n\212\323\016\006Normal*\372\001\n\016kBlockBindType\022\037\n\025k"
  "BLOCK_BIND_TYPE_NONE\020\000\032\004\212\323\016\000\022#\n\025kBLOCK_B"
  "IND_TYPE_DROP\020\002\032\010\212\323\016\004Drop\022%\n\026kBLOCK_BIND"
  "_TYPE_PLANT\020\003\032\t\212\323\016\005Plant\022)\n\030kBLOCK_BIND_"
  "TYPE_SOLDIER\020\004\032\013\212\323\016\007Soldier\022+\n\031kBLOCK_BI"
  "ND_TYPE_BUILDING\020\005\032\014\212\323\016\010Building\022#\n\025kBLO"
  "CK_BIND_TYPE_PROP\020\006\032\010\212\323\016\004Propb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_keywords_5fclient_2eproto_deps[2] = {
  &::descriptor_table_keywords_2eproto,
  &::descriptor_table_tsv2pb_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_keywords_5fclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_keywords_5fclient_2eproto = {
  false, false, 397, descriptor_table_protodef_keywords_5fclient_2eproto, "keywords_client.proto", 
  &descriptor_table_keywords_5fclient_2eproto_once, descriptor_table_keywords_5fclient_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_keywords_5fclient_2eproto::offsets,
  nullptr, file_level_enum_descriptors_keywords_5fclient_2eproto, file_level_service_descriptors_keywords_5fclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_keywords_5fclient_2eproto_getter() {
  return &descriptor_table_keywords_5fclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_keywords_5fclient_2eproto(&descriptor_table_keywords_5fclient_2eproto);
namespace RES {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* kBlockType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_keywords_5fclient_2eproto);
  return file_level_enum_descriptors_keywords_5fclient_2eproto[0];
}
bool kBlockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* kBlockBindType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_keywords_5fclient_2eproto);
  return file_level_enum_descriptors_keywords_5fclient_2eproto[1];
}
bool kBlockBindType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RES
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
