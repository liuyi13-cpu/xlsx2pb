// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keywords_client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_keywords_5fclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_keywords_5fclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include "tsv2pb.pb.h"
#include "keywords.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_keywords_5fclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_keywords_5fclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_keywords_5fclient_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace RES {

enum kBlockType : int {
  kBLOCK_BIND_NONE = 0,
  kBLOCK_TYPE_NORMAL = 1,
  kBlockType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  kBlockType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool kBlockType_IsValid(int value);
constexpr kBlockType kBlockType_MIN = kBLOCK_BIND_NONE;
constexpr kBlockType kBlockType_MAX = kBLOCK_TYPE_NORMAL;
constexpr int kBlockType_ARRAYSIZE = kBlockType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* kBlockType_descriptor();
template<typename T>
inline const std::string& kBlockType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, kBlockType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function kBlockType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    kBlockType_descriptor(), enum_t_value);
}
inline bool kBlockType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, kBlockType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<kBlockType>(
    kBlockType_descriptor(), name, value);
}
enum kBlockBindType : int {
  kBLOCK_BIND_TYPE_NONE = 0,
  kBLOCK_BIND_TYPE_DROP = 2,
  kBLOCK_BIND_TYPE_PLANT = 3,
  kBLOCK_BIND_TYPE_SOLDIER = 4,
  kBLOCK_BIND_TYPE_BUILDING = 5,
  kBLOCK_BIND_TYPE_PROP = 6,
  kBlockBindType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  kBlockBindType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool kBlockBindType_IsValid(int value);
constexpr kBlockBindType kBlockBindType_MIN = kBLOCK_BIND_TYPE_NONE;
constexpr kBlockBindType kBlockBindType_MAX = kBLOCK_BIND_TYPE_PROP;
constexpr int kBlockBindType_ARRAYSIZE = kBlockBindType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* kBlockBindType_descriptor();
template<typename T>
inline const std::string& kBlockBindType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, kBlockBindType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function kBlockBindType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    kBlockBindType_descriptor(), enum_t_value);
}
inline bool kBlockBindType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, kBlockBindType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<kBlockBindType>(
    kBlockBindType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace RES

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RES::kBlockType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RES::kBlockType>() {
  return ::RES::kBlockType_descriptor();
}
template <> struct is_proto_enum< ::RES::kBlockBindType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RES::kBlockBindType>() {
  return ::RES::kBlockBindType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_keywords_5fclient_2eproto
