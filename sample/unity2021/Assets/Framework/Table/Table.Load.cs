// This code was generated by a tool.
using RES;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Timing.Data
{
    public partial class Table
    {
		public const int TableCount = 8;
		public int CurCount = 0;
		public Dictionary<string, ResSprite> m_ResSprite = new Dictionary<string, ResSprite>();
		public Dictionary<int, ResErrorCode> m_ResErrorCode = new Dictionary<int, ResErrorCode>();
		public Dictionary<int, ResItem> m_ResItem = new Dictionary<int, ResItem>();
		public void ReleaseFiles()
		{
			int count = mFilePaths.Count;
			for (int i = 0; i < count; ++i) {
				ReleaseResource(mFilePaths[i]);
			}
			mFilePaths.Clear();
		}
		public void ClearLoadDB()
		{
			CurCount = 0;
			mFilePaths.Clear();
			m_ResSprite.Clear();
			m_ResErrorCode.Clear();
			m_ResItem.Clear();
		}
		public void ReleaseResource(string fullPath)
		{
			mUnloader(fullPath);
		}
		public IEnumerator LoadData_External(Action intervalCallback, Action callback)
		{
			++CurCount;LoadResSprite();
			intervalCallback?.Invoke();
			yield return null;
			++CurCount;LoadResErrorCode();
			++CurCount;LoadResItem();
			intervalCallback?.Invoke();
			yield return null;
			callback?.Invoke();
			ReleaseFiles();
		}
		public void LoadData_External()
		{
			LoadResSprite();
			LoadResErrorCode();
			LoadResItem();
			ReleaseFiles();
		}
        public void LoadResSprite()
        {
            string path = $"{mRelativePath}excel_data/res_sprite.bytes";
            mFilePaths.Add(path);
            byte[] bytes = mLoader(path);
            if (bytes == null)
            {
                UnityEngine.Debug.LogErrorFormat("bin data is empty. path :{0}", path);
                return;
            } 

            ResSpriteArray table;
            table = ResSpriteArray.Parser.ParseFrom(bytes);
            if (table == null) return;
            for (int i = 0; i < table.items.Count; ++i)
            {
                if (!m_ResSprite.ContainsKey(table.items[i].id))
                {
                    m_ResSprite.Add(table.items[i].id, table.items[i]);
                }
                else
                {
                    UnityEngine.Debug.LogErrorFormat("TABLE_ResSprite already have the same key {0}, path {1}", table.items[i].id, path);
                }
            }
        }
        public void LoadResErrorCode()
        {
            string path = $"{mRelativePath}excel_data/res_error_code.bytes";
            mFilePaths.Add(path);
            byte[] bytes = mLoader(path);
            if (bytes == null)
            {
                UnityEngine.Debug.LogErrorFormat("bin data is empty. path :{0}", path);
                return;
            } 

            ResErrorCodeArray table;
            table = ResErrorCodeArray.Parser.ParseFrom(bytes);
            if (table == null) return;
            for (int i = 0; i < table.items.Count; ++i)
            {
                if (!m_ResErrorCode.ContainsKey(table.items[i].id))
                {
                    m_ResErrorCode.Add(table.items[i].id, table.items[i]);
                }
                else
                {
                    UnityEngine.Debug.LogErrorFormat("TABLE_ResErrorCode already have the same key {0}, path {1}", table.items[i].id, path);
                }
            }
        }
        public void LoadResItem()
        {
            string path = $"{mRelativePath}excel_data/res_item.bytes";
            mFilePaths.Add(path);
            byte[] bytes = mLoader(path);
            if (bytes == null)
            {
                UnityEngine.Debug.LogErrorFormat("bin data is empty. path :{0}", path);
                return;
            } 

            ResItemArray table;
            table = ResItemArray.Parser.ParseFrom(bytes);
            if (table == null) return;
            for (int i = 0; i < table.items.Count; ++i)
            {
                if (!m_ResItem.ContainsKey(table.items[i].id))
                {
                    m_ResItem.Add(table.items[i].id, table.items[i]);
                }
                else
                {
                    UnityEngine.Debug.LogErrorFormat("TABLE_ResItem already have the same key {0}, path {1}", table.items[i].id, path);
                }
            }
        }
#region getter
		// 图片资源表, file:excel_data/res_sprite.bytes
		public ResSprite GetResSprite(string id, bool logError = true)
		{
			m_ResSprite.TryGetValue(id, out var data);
			#if UNITY_EDITOR
            if (data == null && logError) { UnityEngine.Debug.LogErrorFormat("ResSprite MISSING : {0}", id); }
			#endif
			return data;
		}
		// 错误码表, file:excel_data/res_error_code.bytes
		public ResErrorCode GetResErrorCode(int id, bool logError = true)
		{
			m_ResErrorCode.TryGetValue(id, out var data);
			#if UNITY_EDITOR
            if (data == null && logError) { UnityEngine.Debug.LogErrorFormat("ResErrorCode MISSING : {0}", id); }
			#endif
			return data;
		}
		// 道具表, file:excel_data/res_item.bytes
		public ResItem GetResItem(int id, bool logError = true)
		{
			m_ResItem.TryGetValue(id, out var data);
			#if UNITY_EDITOR
            if (data == null && logError) { UnityEngine.Debug.LogErrorFormat("ResItem MISSING : {0}", id); }
			#endif
			return data;
		}
#endregion
    }
}