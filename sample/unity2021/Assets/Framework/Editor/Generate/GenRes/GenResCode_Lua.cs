using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Google.Protobuf.Reflection;
using Timing.Data;
using UnityEditor;
using UnityEngine;

namespace ksc.Service.ToolGen
{
    partial class GenResCode
    {
        private void GenLua()
        {
            // 导出lua加载表代码
            GenLuaTableCode(Path.Combine(Application.dataPath, "Lua/Data/res/data_mgr_load.lua"));
            
            // 导出lua常量
            GenLuaConstCodeEnum(Path.Combine(Application.dataPath, "Lua/Data/res/res_enum.lua"));
            
            // 导出ResSprite常量
            GenLuaConstCodeSprite(Path.Combine(Application.dataPath, "Lua/Data/res/res_sprite_const.lua"));
        }

        #region lua加载表代码
        private void GenLuaTableCode(string outFilePath)
        {
            var sb = new StringBuilder();
            sb.Append("-- THIS SOURCE CODE WAS AUTO-GENERATED BY TOOL, DO NOT MODIFY IT!!!\n");
            sb.Append("\n");
            sb.Append("---@type data_mgr\n");
            sb.Append("local M = ks.data_mgr\n");
            sb.Append("\n");
            
            // loadall
            sb.Append("---@public\n");
            sb.Append("function M:load_all()\n");
            for (int i = 0; i < mItems.Count; ++i)
            {
                if (mItems[i].genType == 1)
                {
                    // 仅导出C#
                    continue;
                }
                // 表名
                var msgName = mItems[i].fileName;
                sb.Append("    self:load_" + msgName + "_all()\n");
            }
            sb.Append("end\n");
            sb.Append("\n");
            
            for (int i = 0; i < mItems.Count; ++i)
            {
                if (mItems[i].genType == 1)
                {
                    // 仅导出C#
                    continue;
                }
                if (mItems[i].types.Count == 1)
                {
                    // 单主键
                    LoadOneKey(sb, mItems[i]);
                }
                else
                {
                    // 双主键
                    LoadTwoKey(sb, mItems[i]);
                }
            }
            
            File.WriteAllText(outFilePath, sb.ToString());
        }
        
        private void LoadOneKey(StringBuilder sb, DataItem item)
        {
            // 类名
            var className = item._class;
            // 表名
            var msgName = item.fileName;
            // 主键
            var keyName = item.types[0].name;

            sb.Append("---@public \n");
            sb.Append("---@return RES." + className + "[]\n");
            sb.Append("function M:load_" + msgName + "_all()\n");
            sb.Append("    if not self." + msgName + "_db then\n");
            sb.Append("        self." + msgName + "_db = self:load_pb('" + msgName + "', " + "'RES." + className + "Array', '" + keyName + "')\n");
            sb.Append("    end\n");
            sb.Append("    return self." + msgName + "_db\n");
            sb.Append("end\n");

            sb.Append("---@public \n");
            sb.Append("---@return RES." + className + "\n");
            sb.Append("function M:load_" + msgName + "(key)\n");
            sb.Append("    if not self." + msgName + "_db then\n");
            sb.Append("        self:load_" + msgName + "_all()\n");
            sb.Append("    end\n");
            sb.Append("    return self." + msgName + "_db[key]\n");
            sb.Append("end\n");
            
            sb.Append("\n");
        }
        
        private void LoadTwoKey(StringBuilder sb, DataItem item)
        {
            // 类名
            var className = item._class;
            // 表名
            var msgName = item.fileName;
            // 主键1
            var keyName1 = item.types[0].name;
            // 主键2
            var keyName2 = item.types[1].name;
            
            sb.Append("---@public \n");
            sb.Append("---@return RES." + className + "[][]\n");
            sb.Append("function M:load_" + msgName + "_all()\n");
            sb.Append("    if not self." + msgName + "_db then\n");
            sb.Append("        self." + msgName + "_db = self:load_pb( '" + msgName + "', " + "'RES." + className + "Array', '" + keyName1 + "', '" + keyName2 + "')\n");
            sb.Append("    end\n");
            sb.Append("    return self." + msgName + "_db\n");
            sb.Append("end\n");

            sb.Append("---@public \n");
            sb.Append("---@return RES." + className + "[]\n");
            sb.Append("function M:load_" + msgName + "_array(key)\n");
            sb.Append("    if not self." + msgName + "_db then\n");
            sb.Append("        self:load_" + msgName + "_all()\n");
            sb.Append("    end\n");
            sb.Append("    return self." + msgName + "_db[key]\n");
            sb.Append("end\n");
            
            sb.Append("---@public \n");
            sb.Append("---@return RES." + className + "\n");
            sb.Append("function M:load_" + msgName + "(key1, key2)\n");
            sb.Append("    if not self." + msgName + "_db then\n");
            sb.Append("        self:load_" + msgName + "_all()\n");
            sb.Append("    end\n");
            sb.Append("    return self." + msgName + "_db[key1][key2]\n");
            sb.Append("end\n");
            
            sb.Append("\n");
        }
        #endregion lua加载表代码

        #region Lua常量

        private void GenLuaConstCodeEnum(string outFilePath)
        {
            var name = Path.GetFileNameWithoutExtension(outFilePath);
            
            var sb = new StringBuilder();
            sb.Append("-- THIS SOURCE CODE WAS AUTO-GENERATED BY TOOL, DO NOT MODIFY IT!!!\n");
            sb.Append("\n");
            sb.Append($"---@class {name}\n");
            sb.Append("local M = {}\n");
            sb.Append("\n");
            
            // Keywords
            _GenLuaConstCodeEnum(RES.KeywordsReflection.Descriptor, sb);
            // KeywordsClient
            _GenLuaConstCodeEnum(RES.KeywordsClientReflection.Descriptor, sb);

            sb.Append("return M");
            File.WriteAllText(outFilePath, sb.ToString());
        }

        private void _GenLuaConstCodeEnum(FileDescriptor descriptor, StringBuilder sb)
        {
            foreach (var descriptorEnumType in descriptor.EnumTypes)
            {
                sb.Append($"---@class {descriptorEnumType.Name}\n");
                sb.Append("M." + descriptorEnumType.Name + " = {\n");
                foreach (var value in descriptorEnumType.Values)
                {
                    sb.Append($"    {value.Name} = {value.Number},\n");
                    // TODO custom option C#未实现
                    // var options = value.GetOptions();
                }
                sb.Append("}\n");
                sb.Append("\n");
            }
        }
        #endregion Lua常量
        
        #region ResSprite常量
        private void GenLuaConstCodeSprite(string outFilePath)
        {
            var name = Path.GetFileNameWithoutExtension(outFilePath);
            
            var sb = new StringBuilder();
            sb.Append("-- THIS SOURCE CODE WAS AUTO-GENERATED BY TOOL, DO NOT MODIFY IT!!!\n");
            sb.Append("\n");
            sb.Append($"---@class {name}\n");
            sb.Append("local M = {\n");

            byte[] Loader(string path)
            {
                return AssetDatabase.LoadAssetAtPath<TextAsset>(path).bytes;
            }
            Table.Instance.Init(Loader, null, "Assets/Resource/ABResources/data/");
            Table.Instance.LoadResSprite();
            var list = new List<string>();
            list.AddRange(Table.Instance.m_ResSprite.Keys);
            list.Sort();
            Table.Instance.Release();
            
            foreach (var key in list)
            {
                // 检测命名规范
                
                sb.Append($"    {key} = \"{key}\",\n");
            }
            
            sb.Append("}\n");
            sb.Append("return M");
            File.WriteAllText(outFilePath, sb.ToString());
        }
        #endregion ResSprite常量
    }
}