using System.Collections.Generic;
using System.IO;
using System.Text;
using Google.Protobuf.Reflection;
using ksc.Service.ToolGen;
using UnityEditor;
using UnityEngine;

public class GenMsg
{
    public static bool GenDataCS()
    {
        var workDirectory = SyncTools.GetToolGenPath();
        // 1.把所有proto文件拷贝到output目录
        var sourcePath =  Path.Combine(workDirectory, "Protobuf/client");
        var outPath = Path.Combine(workDirectory, "Protobuf/out");
        Directory.CreateDirectory(outPath);
        IOUtils.CopyFilesRecursively(new DirectoryInfo(sourcePath), new DirectoryInfo(outPath), true, new []{"*.proto"}, 2);
        
        // 2.导出proto
        var protocPath = Path.Combine(workDirectory, ExternalProcessInvoke.GetProtocFileName());
        var protoPath = "./Protobuf/out";
        var importPath = "./Protobuf/out";
        var csPath = "./Protobuf/gen/cs";
        var binFile = "./Protobuf/gen/bin/proto_msg.pb";

        IOUtils.CreateAllSubPath(workDirectory, csPath.Replace(".", string.Empty) + "/");
        IOUtils.CreateAllSubPath(workDirectory, binFile);

        var success =  ExternalProcessInvoke.Proto2csAllRelativeProtoPath(protocPath, protoPath, importPath, csPath,
            workDirectory, binFile);
        
        Directory.Delete(outPath, true);
        return success;
    }
    
    public static void Copy2Dest()
    {
        string toolGenPath = SyncTools.GetToolGenPath();
        DirectoryInfo sourceDir;
        DirectoryInfo destDir;
        // copy cs
        string sourceCsPath = Path.Combine(toolGenPath, "Protobuf/gen/cs");
        string destCsPath = Path.Combine(Application.dataPath, "Scripts/Proto/CSMsg");
        sourceDir = new DirectoryInfo(sourceCsPath);
        destDir = new DirectoryInfo(destCsPath);
        IOUtils.CopyFilesRecursively(sourceDir, destDir, true, ".cs");

        // copy bin
        var sourceBinPath = Path.Combine(toolGenPath, "Protobuf/gen/bin");
        var destBinPath = Path.Combine(Application.dataPath, "RawData/Proto");
        sourceDir = new DirectoryInfo(sourceBinPath);
        destDir = new DirectoryInfo(destBinPath);
        IOUtils.CopyFilesRecursively(sourceDir, destDir, true, ".pb");

        Directory.Delete(Path.Combine(toolGenPath, "Protobuf/gen/"), true);
    }
    
    #region Lua常量
    public static void GenLuaConstCodeEnum(string outFilePath)
    {
        var name = Path.GetFileNameWithoutExtension(outFilePath);
            
        var sb = new StringBuilder();
        sb.Append("-- THIS SOURCE CODE WAS AUTO-GENERATED BY TOOL, DO NOT MODIFY IT!!!\n");
        sb.Append("\n");
        sb.Append($"---@class {name}\n");
        sb.Append("local M = {}\n");
        sb.Append("\n");
            
        // ErrorCode
        _GenLuaConstCodeEnum(ErrorCodeReflection.Descriptor, sb);
        // Keywords
        _GenLuaConstCodeEnum(KeywordReflection.Descriptor, sb);

        sb.Append("return M");
        File.WriteAllText(outFilePath, sb.ToString());
    }

    private static void _GenLuaConstCodeEnum(FileDescriptor descriptor, StringBuilder sb)
    {
        foreach (var descriptorEnumType in descriptor.EnumTypes)
        {
            sb.Append($"---@class {descriptorEnumType.Name}\n");
            sb.Append("M." + descriptorEnumType.Name + " = {\n");
            foreach (var value in descriptorEnumType.Values)
            {
                sb.Append($"    {value.Name} = {value.Number},\n");
            }
            sb.Append("}\n");
            sb.Append("\n");
        }
    }
    #endregion Lua常量
    
    #region InfoPlayerConfig

    struct MsgData
    {
        public string type;
        public string name;
        public int number;
    }
    
    private static Dictionary<string, List<MsgData>> s_MsgCache = new Dictionary<string, List<MsgData>>();
    private static string s_MsgName;
    public static void GenLuaConstCodeIPC(string outFilePath)
    {
        s_MsgName = Path.GetFileNameWithoutExtension(outFilePath);
            
        var sb = new StringBuilder();
        sb.Append("-- THIS SOURCE CODE WAS AUTO-GENERATED BY TOOL, DO NOT MODIFY IT!!!\n");
        sb.Append("\n");
        sb.Append($"---@class {s_MsgName}\n");
        sb.Append("local M = {}\n");
        sb.Append("\n");

        CollectMsgCache();
        _GenLuaConstCodeIPC(sb);

        sb.Append("return M");
        File.WriteAllText(outFilePath, sb.ToString());
    }

    private static void CollectMsgCache()
    {
        s_MsgCache["InfoPlayer"] = new List<MsgData>();
        foreach (var fieldDescriptor in InfoPlayer.Descriptor.Fields.InFieldNumberOrder())
        {
            MsgData data;
            data.type = fieldDescriptor.MessageType.Name;
            data.name = fieldDescriptor.Name;
            data.number = fieldDescriptor.FieldNumber;
            s_MsgCache["InfoPlayer"].Add(data);
            
            // 子消息
            s_MsgCache[data.type] = new List<MsgData>();
            foreach (var subFieldDescriptor in fieldDescriptor.MessageType.Fields.InFieldNumberOrder())
            {
                if (subFieldDescriptor.FieldType != FieldType.Message) continue;
                var isMessage = false;
                string type = null;
                if (subFieldDescriptor.IsMap)
                {
                    foreach (var descriptor in subFieldDescriptor.MessageType.Fields.InFieldNumberOrder())
                    {
                        if (descriptor.FieldType == FieldType.Message)
                        {
                            isMessage = true;
                            type = descriptor.MessageType.Name;
                            break;
                        }
                    }
                }
                else
                {
                    isMessage = true;
                }

                if (isMessage)
                {
                    MsgData subData;
                    subData.type = type ?? subFieldDescriptor.MessageType.Name;
                    subData.name = subFieldDescriptor.Name;
                    subData.number = subFieldDescriptor.FieldNumber;
                    s_MsgCache[data.type].Add(subData);     
                }
            }
        }
    }

    private static void _GenLuaConstCodeIPC(StringBuilder sb)
    {
        // EVENT
        sb.Append($"---@class {s_MsgName}.EVENT\n");
        sb.Append("M.EVENT = {\n");

        sb.Append("    ---TAG1\n");
        foreach (var msgData in s_MsgCache["InfoPlayer"])
        {
            var tag = $"TAG1_{msgData.name}";
            sb.Append($"    {tag} = '{tag}',\n");
        }
        
        sb.Append("\n");
        sb.Append("    ---TAG2\n");
        foreach (var kvp in s_MsgCache)
        {
            if (kvp.Key == "InfoPlayer")
            {
                continue;
            }
            foreach (var msgData in kvp.Value)
            {
                var tag = $"TAG2_{msgData.name}";
                sb.Append($"    {tag} = '{tag}',\n");
            }
        }
        sb.Append("}\n");
        
        
        // TAG1
        sb.Append($"---@class {s_MsgName}.TAG1\n");
        sb.Append("M.TAG1 = {\n");
        foreach (var msgData in s_MsgCache["InfoPlayer"])
        {
            sb.Append($"    {msgData.name} = {msgData.number},\n");
        }
        sb.Append("}\n");
        
        
        // TAG2
        sb.Append($"---@class {s_MsgName}.TAG2\n");
        sb.Append("M.TAG2 = {\n");
        foreach (var kvp in s_MsgCache)
        {
            if (kvp.Key == "InfoPlayer")
            {
                continue;
            }

            var msgName = GetMsgName(kvp.Key);
            foreach (var msgData in kvp.Value)
            {
                sb.Append($"    {msgName}_{msgData.name} = {msgData.number},\n");
            }
        }
        sb.Append("}\n");
        
        
        // UPDATE_TAG1
        sb.Append($"---@class {s_MsgName}.UPDATE_TAG1\n");
        sb.Append("M.UPDATE_TAG1 = {\n");
        foreach (var msgData in s_MsgCache["InfoPlayer"])
        {
            sb.Append($"    [{msgData.number}] = {{ '{msgData.type}', '{msgData.name}' }},\n");
        }
        sb.Append("}\n");
        
        // UPDATE_TAG2
        sb.Append($"---@class {s_MsgName}.UPDATE_TAG2\n");
        sb.Append("M.UPDATE_TAG2 = {\n");
        foreach (var msgData in s_MsgCache["InfoPlayer"])
        {
            sb.Append($"    [{msgData.number}] = {{\n");
            foreach (var subMsgData in s_MsgCache[msgData.type])
            {
                sb.Append($"        [{subMsgData.number}] = {{ '{subMsgData.type}', '{subMsgData.name}' }},\n");
            }
            sb.Append("    },\n");
        }
        sb.Append("}\n");
    }

    private static string GetMsgName(string type)
    {
        foreach (var msgData in s_MsgCache["InfoPlayer"])
        {
            if (msgData.type == type)
            {
                return msgData.name;
            }
        }
        return null;
    }

    #endregion InfoPlayerConfig
}
