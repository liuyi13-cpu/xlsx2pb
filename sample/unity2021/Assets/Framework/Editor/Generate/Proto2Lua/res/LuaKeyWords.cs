using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

namespace MakeLuaProtoConfig
{
    class LuaKeyWords : Base
    {
        private Dictionary<string, List<ProtoData>> enum_dic = new Dictionary<string, List<ProtoData>>();
        private List<ProtoData> cur_proto = new List<ProtoData>();
        private bool is_aggregation = false;
        public LuaKeyWords(string protoFile)
        {
            var dir = Directory.GetCurrentDirectory();
            protoFile = Path.Combine(dir, protoFile);
            var arr = File.ReadAllLines(protoFile);

            foreach (var item in arr)
            {
                if ((item.Contains("enum") || item.Contains("}")) && !item.Contains("//"))
                {
                    AddDicKey(item);
                }
                if ((item.Contains("=") || item.Contains("//")) && !item.Contains("int32") && !item.Contains("syntax = \"proto3\";") && !item.Contains("option") && is_aggregation)
                {
                    ParseProto(item);
                }
            }
        }
        private void AddDicKey(string item)
        {
            item = item.Trim();
            item = Regex.Replace(item.Trim(), "\\s+", " ");
            // 枚举名称
            if (item.Contains("enum"))
            {
                is_aggregation = true;
                item = item.Replace("{", "");
                var arr = item.Split(' ');
                enum_dic[arr[1]] = new List<ProtoData>();
                cur_proto = enum_dic[arr[1]];
            }
            else if (item.Contains("}"))
            {
                is_aggregation = false;
            }
        }
        protected override void ParseProto(string item)
        {
            item = item.Trim().Replace(";", "");
            item = Regex.Replace(item.Trim(), "\\s+", " ");
            var data = new ProtoData();
            if (item.Contains("="))
            {
                // 消息
                var arr = item.Split(' ');
                data.className = arr[0];
                data.cmdId = arr[2];
                if (arr.Length > 3)
                {
                    data.comment = " --";
                    for (int i = 3; i < arr.Length; i++)
                    {
                        data.comment += arr[i];
                    }
                }
            }
            else if (item.Contains("//"))
            {
                // 注释
                data.comment = item.Replace("//", "--");
            }
            cur_proto.Add(data);
        }

        public void Make(string outFilePath)
        {
            var dir = Directory.GetCurrentDirectory();
            outFilePath = Path.Combine(dir, outFilePath);
            StringBuilder sb = new StringBuilder();
            sb.Append("-- THIS SOURCE CODE WAS AUTO-GENERATED BY TOOL, DO NOT MODIFY IT!!!\n");
            sb.Append("\n");
            // 1

            var enumerator = enum_dic.GetEnumerator();
            while (enumerator.MoveNext())
            {
                sb.Append("---@class " + enumerator.Current.Key + "\n");
                sb.Append(enumerator.Current.Key + " = {\n");
                foreach (var item in enumerator.Current.Value)
                {
                    if (string.IsNullOrEmpty(item.className))
                    {
                        sb.Append("\n");
                        sb.Append("    ").Append(item.comment + "\n");
                    }
                    else
                    {
                        sb.Append("    ").Append(item.className).Append(" = ").Append(item.cmdId).Append(",");
                        if (!string.IsNullOrEmpty(item.comment))
                        {
                            sb.Append(item.comment + "\n");
                        }
                        else
                        {
                            sb.Append("\n");
                        }
                    }
                }
                sb.Append("}\n");
            }
            enumerator.Dispose();
            File.WriteAllText(outFilePath, sb.ToString());
        }
    }
}

