using System.IO;
using System.Text;
using System.Text.RegularExpressions;

namespace MakeLuaProtoConfig
{
    class ErrorCode : Base
    {
        public ErrorCode(string protoFile)
        {
            var dir = Directory.GetCurrentDirectory();
            protoFile = Path.Combine(dir, protoFile);
            var arr = File.ReadAllLines(protoFile);

            foreach (var item in arr)
            {
                if ((item.Contains("=") || item.Contains("//")) && !item.Contains("int32") && !item.Contains("syntax = \"proto3\";"))
                {
                    ParseProto(item);
                }
            }
        }

        protected override void ParseProto(string item)
        {
            item = item.Trim().Replace(";", "");
            item = Regex.Replace(item.Trim(), "\\s+", " ");
            var data = new ProtoData();
            if (item.Contains("="))
            {
                // 消息
                var arr = item.Split(' ');
                data.className = arr[0];
                data.cmdId = arr[2];

                if (arr.Length > 3)
                {
                    data.comment = arr[3].Replace("//", "--");
                    if (arr.Length > 4)
                    {
                        data.comment += arr[4];
                    }
                }
            }
            else if (item.Contains("//"))
            {
                // 注释
                data.comment = item.Replace("//", "--");
            }
            protoList.Add(data);
        }

        public void Make(string outFilePath)
        {
            var dir = Directory.GetCurrentDirectory();
            outFilePath = Path.Combine(dir, outFilePath);
            StringBuilder sb = new StringBuilder();
            sb.Append("-- THIS SOURCE CODE WAS AUTO-GENERATED BY TOOL, DO NOT MODIFY IT!!!\n");
            sb.Append("\n");
            
            // 1
            sb.Append("---@class RetErrorCode\n");
            sb.Append("RetErrorCode = {\n");
            foreach (var item in protoList)
            {
                if (string.IsNullOrEmpty(item.className))
                {
                    sb.Append("\n");
                    sb.Append("    ").Append(item.comment + "\n");
                }
                else
                {
                    sb.Append("    ").Append(item.className).Append(" = ").Append(item.cmdId).Append(",");
                    if (!string.IsNullOrEmpty(item.comment))
                    {
                        sb.Append(item.comment + "\n");
                    }
                    else
                    {
                        sb.Append("\n");
                    }
                }
            }
            sb.Append("}\n");
            //2
            sb.Append("---@class RefreshErrorCode\n");
            sb.Append("RefreshErrorCode = {\n");
            foreach (var item in protoList)
            {
                if (string.IsNullOrEmpty(item.className))
                {
                    sb.Append("\n");
                    sb.Append("    ").Append(item.comment + "\n");
                }
                else
                {
                    sb.Append("    ").Append(item.className).Append(" = ").Append(" '").Append(item.className).Append("',");
                    if (!string.IsNullOrEmpty(item.comment))
                    {
                        sb.Append(item.comment + "\n");
                    }
                    else
                    {
                        sb.Append("\n");
                    }
                }
            }
            sb.Append("}\n");
            File.WriteAllText(outFilePath, sb.ToString());
        }
    }
}