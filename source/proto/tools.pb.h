// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tools.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tools_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tools_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tools_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tools_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tools_2eproto;
namespace TOOL {
class CheckLabel;
struct CheckLabelDefaultTypeInternal;
extern CheckLabelDefaultTypeInternal _CheckLabel_default_instance_;
class CheckLabelArray;
struct CheckLabelArrayDefaultTypeInternal;
extern CheckLabelArrayDefaultTypeInternal _CheckLabelArray_default_instance_;
class CheckLabelCommand;
struct CheckLabelCommandDefaultTypeInternal;
extern CheckLabelCommandDefaultTypeInternal _CheckLabelCommand_default_instance_;
class CheckLabelCommandNum;
struct CheckLabelCommandNumDefaultTypeInternal;
extern CheckLabelCommandNumDefaultTypeInternal _CheckLabelCommandNum_default_instance_;
class CheckLabelCommandRef;
struct CheckLabelCommandRefDefaultTypeInternal;
extern CheckLabelCommandRefDefaultTypeInternal _CheckLabelCommandRef_default_instance_;
class XlsxData;
struct XlsxDataDefaultTypeInternal;
extern XlsxDataDefaultTypeInternal _XlsxData_default_instance_;
class XlsxDataArray;
struct XlsxDataArrayDefaultTypeInternal;
extern XlsxDataArrayDefaultTypeInternal _XlsxDataArray_default_instance_;
class XlsxData_ChecklabelMapEntry_DoNotUse;
struct XlsxData_ChecklabelMapEntry_DoNotUseDefaultTypeInternal;
extern XlsxData_ChecklabelMapEntry_DoNotUseDefaultTypeInternal _XlsxData_ChecklabelMapEntry_DoNotUse_default_instance_;
class XlsxValue;
struct XlsxValueDefaultTypeInternal;
extern XlsxValueDefaultTypeInternal _XlsxValue_default_instance_;
class XlsxValueMap;
struct XlsxValueMapDefaultTypeInternal;
extern XlsxValueMapDefaultTypeInternal _XlsxValueMap_default_instance_;
class XlsxValueMap_ValueMapEntry_DoNotUse;
struct XlsxValueMap_ValueMapEntry_DoNotUseDefaultTypeInternal;
extern XlsxValueMap_ValueMapEntry_DoNotUseDefaultTypeInternal _XlsxValueMap_ValueMapEntry_DoNotUse_default_instance_;
class XlsxValue_StructValueEntry_DoNotUse;
struct XlsxValue_StructValueEntry_DoNotUseDefaultTypeInternal;
extern XlsxValue_StructValueEntry_DoNotUseDefaultTypeInternal _XlsxValue_StructValueEntry_DoNotUse_default_instance_;
}  // namespace TOOL
PROTOBUF_NAMESPACE_OPEN
template<> ::TOOL::CheckLabel* Arena::CreateMaybeMessage<::TOOL::CheckLabel>(Arena*);
template<> ::TOOL::CheckLabelArray* Arena::CreateMaybeMessage<::TOOL::CheckLabelArray>(Arena*);
template<> ::TOOL::CheckLabelCommand* Arena::CreateMaybeMessage<::TOOL::CheckLabelCommand>(Arena*);
template<> ::TOOL::CheckLabelCommandNum* Arena::CreateMaybeMessage<::TOOL::CheckLabelCommandNum>(Arena*);
template<> ::TOOL::CheckLabelCommandRef* Arena::CreateMaybeMessage<::TOOL::CheckLabelCommandRef>(Arena*);
template<> ::TOOL::XlsxData* Arena::CreateMaybeMessage<::TOOL::XlsxData>(Arena*);
template<> ::TOOL::XlsxDataArray* Arena::CreateMaybeMessage<::TOOL::XlsxDataArray>(Arena*);
template<> ::TOOL::XlsxData_ChecklabelMapEntry_DoNotUse* Arena::CreateMaybeMessage<::TOOL::XlsxData_ChecklabelMapEntry_DoNotUse>(Arena*);
template<> ::TOOL::XlsxValue* Arena::CreateMaybeMessage<::TOOL::XlsxValue>(Arena*);
template<> ::TOOL::XlsxValueMap* Arena::CreateMaybeMessage<::TOOL::XlsxValueMap>(Arena*);
template<> ::TOOL::XlsxValueMap_ValueMapEntry_DoNotUse* Arena::CreateMaybeMessage<::TOOL::XlsxValueMap_ValueMapEntry_DoNotUse>(Arena*);
template<> ::TOOL::XlsxValue_StructValueEntry_DoNotUse* Arena::CreateMaybeMessage<::TOOL::XlsxValue_StructValueEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TOOL {

// ===================================================================

class CheckLabel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TOOL.CheckLabel) */ {
 public:
  inline CheckLabel() : CheckLabel(nullptr) {}
  ~CheckLabel() override;
  explicit constexpr CheckLabel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckLabel(const CheckLabel& from);
  CheckLabel(CheckLabel&& from) noexcept
    : CheckLabel() {
    *this = ::std::move(from);
  }

  inline CheckLabel& operator=(const CheckLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckLabel& operator=(CheckLabel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckLabel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckLabel* internal_default_instance() {
    return reinterpret_cast<const CheckLabel*>(
               &_CheckLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CheckLabel& a, CheckLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckLabel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckLabel* New() const final {
    return CreateMaybeMessage<CheckLabel>(nullptr);
  }

  CheckLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckLabel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckLabel& from);
  void MergeFrom(const CheckLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckLabel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TOOL.CheckLabel";
  }
  protected:
  explicit CheckLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckLabelFieldNumber = 1,
    kCheckStringFieldNumber = 2,
  };
  // string check_label = 1;
  void clear_check_label();
  const std::string& check_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_check_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_check_label();
  std::string* release_check_label();
  void set_allocated_check_label(std::string* check_label);
  private:
  const std::string& _internal_check_label() const;
  void _internal_set_check_label(const std::string& value);
  std::string* _internal_mutable_check_label();
  public:

  // string check_string = 2;
  void clear_check_string();
  const std::string& check_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_check_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_check_string();
  std::string* release_check_string();
  void set_allocated_check_string(std::string* check_string);
  private:
  const std::string& _internal_check_string() const;
  void _internal_set_check_string(const std::string& value);
  std::string* _internal_mutable_check_string();
  public:

  // @@protoc_insertion_point(class_scope:TOOL.CheckLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr check_label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr check_string_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tools_2eproto;
};
// -------------------------------------------------------------------

class CheckLabelArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TOOL.CheckLabelArray) */ {
 public:
  inline CheckLabelArray() : CheckLabelArray(nullptr) {}
  ~CheckLabelArray() override;
  explicit constexpr CheckLabelArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckLabelArray(const CheckLabelArray& from);
  CheckLabelArray(CheckLabelArray&& from) noexcept
    : CheckLabelArray() {
    *this = ::std::move(from);
  }

  inline CheckLabelArray& operator=(const CheckLabelArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckLabelArray& operator=(CheckLabelArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckLabelArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckLabelArray* internal_default_instance() {
    return reinterpret_cast<const CheckLabelArray*>(
               &_CheckLabelArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CheckLabelArray& a, CheckLabelArray& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckLabelArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckLabelArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckLabelArray* New() const final {
    return CreateMaybeMessage<CheckLabelArray>(nullptr);
  }

  CheckLabelArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckLabelArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckLabelArray& from);
  void MergeFrom(const CheckLabelArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckLabelArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TOOL.CheckLabelArray";
  }
  protected:
  explicit CheckLabelArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckLabelArrayFieldNumber = 1,
  };
  // repeated .TOOL.CheckLabel check_label_array = 1;
  int check_label_array_size() const;
  private:
  int _internal_check_label_array_size() const;
  public:
  void clear_check_label_array();
  ::TOOL::CheckLabel* mutable_check_label_array(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::CheckLabel >*
      mutable_check_label_array();
  private:
  const ::TOOL::CheckLabel& _internal_check_label_array(int index) const;
  ::TOOL::CheckLabel* _internal_add_check_label_array();
  public:
  const ::TOOL::CheckLabel& check_label_array(int index) const;
  ::TOOL::CheckLabel* add_check_label_array();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::CheckLabel >&
      check_label_array() const;

  // @@protoc_insertion_point(class_scope:TOOL.CheckLabelArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::CheckLabel > check_label_array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tools_2eproto;
};
// -------------------------------------------------------------------

class CheckLabelCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TOOL.CheckLabelCommand) */ {
 public:
  inline CheckLabelCommand() : CheckLabelCommand(nullptr) {}
  ~CheckLabelCommand() override;
  explicit constexpr CheckLabelCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckLabelCommand(const CheckLabelCommand& from);
  CheckLabelCommand(CheckLabelCommand&& from) noexcept
    : CheckLabelCommand() {
    *this = ::std::move(from);
  }

  inline CheckLabelCommand& operator=(const CheckLabelCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckLabelCommand& operator=(CheckLabelCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckLabelCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckLabelCommand* internal_default_instance() {
    return reinterpret_cast<const CheckLabelCommand*>(
               &_CheckLabelCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CheckLabelCommand& a, CheckLabelCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckLabelCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckLabelCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckLabelCommand* New() const final {
    return CreateMaybeMessage<CheckLabelCommand>(nullptr);
  }

  CheckLabelCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckLabelCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckLabelCommand& from);
  void MergeFrom(const CheckLabelCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckLabelCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TOOL.CheckLabelCommand";
  }
  protected:
  explicit CheckLabelCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 10,
    kNumFieldNumber = 11,
    kRefFieldNumber = 12,
    kUniqueFieldNumber = 5,
    kUniqueFieldFieldNumber = 9,
    kKeyFieldNumber = 1,
    kEmptySkipFieldNumber = 2,
    kDataNotEmptyFieldNumber = 3,
    kDataUniqueFieldNumber = 4,
    kLeRightFieldNumber = 6,
    kLtRightFieldNumber = 7,
    kCheckFromRightFieldNumber = 8,
  };
  // repeated string range = 10;
  int range_size() const;
  private:
  int _internal_range_size() const;
  public:
  void clear_range();
  const std::string& range(int index) const;
  std::string* mutable_range(int index);
  void set_range(int index, const std::string& value);
  void set_range(int index, std::string&& value);
  void set_range(int index, const char* value);
  void set_range(int index, const char* value, size_t size);
  std::string* add_range();
  void add_range(const std::string& value);
  void add_range(std::string&& value);
  void add_range(const char* value);
  void add_range(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_range();
  private:
  const std::string& _internal_range(int index) const;
  std::string* _internal_add_range();
  public:

  // repeated .TOOL.CheckLabelCommandNum num = 11;
  int num_size() const;
  private:
  int _internal_num_size() const;
  public:
  void clear_num();
  ::TOOL::CheckLabelCommandNum* mutable_num(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::CheckLabelCommandNum >*
      mutable_num();
  private:
  const ::TOOL::CheckLabelCommandNum& _internal_num(int index) const;
  ::TOOL::CheckLabelCommandNum* _internal_add_num();
  public:
  const ::TOOL::CheckLabelCommandNum& num(int index) const;
  ::TOOL::CheckLabelCommandNum* add_num();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::CheckLabelCommandNum >&
      num() const;

  // repeated .TOOL.CheckLabelCommandRef ref = 12;
  int ref_size() const;
  private:
  int _internal_ref_size() const;
  public:
  void clear_ref();
  ::TOOL::CheckLabelCommandRef* mutable_ref(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::CheckLabelCommandRef >*
      mutable_ref();
  private:
  const ::TOOL::CheckLabelCommandRef& _internal_ref(int index) const;
  ::TOOL::CheckLabelCommandRef* _internal_add_ref();
  public:
  const ::TOOL::CheckLabelCommandRef& ref(int index) const;
  ::TOOL::CheckLabelCommandRef* add_ref();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::CheckLabelCommandRef >&
      ref() const;

  // string unique = 5;
  void clear_unique();
  const std::string& unique() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unique(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unique();
  std::string* release_unique();
  void set_allocated_unique(std::string* unique);
  private:
  const std::string& _internal_unique() const;
  void _internal_set_unique(const std::string& value);
  std::string* _internal_mutable_unique();
  public:

  // string unique_field = 9;
  void clear_unique_field();
  const std::string& unique_field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unique_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unique_field();
  std::string* release_unique_field();
  void set_allocated_unique_field(std::string* unique_field);
  private:
  const std::string& _internal_unique_field() const;
  void _internal_set_unique_field(const std::string& value);
  std::string* _internal_mutable_unique_field();
  public:

  // bool key = 1;
  void clear_key();
  bool key() const;
  void set_key(bool value);
  private:
  bool _internal_key() const;
  void _internal_set_key(bool value);
  public:

  // bool empty_skip = 2;
  void clear_empty_skip();
  bool empty_skip() const;
  void set_empty_skip(bool value);
  private:
  bool _internal_empty_skip() const;
  void _internal_set_empty_skip(bool value);
  public:

  // bool data_not_empty = 3;
  void clear_data_not_empty();
  bool data_not_empty() const;
  void set_data_not_empty(bool value);
  private:
  bool _internal_data_not_empty() const;
  void _internal_set_data_not_empty(bool value);
  public:

  // bool data_unique = 4;
  void clear_data_unique();
  bool data_unique() const;
  void set_data_unique(bool value);
  private:
  bool _internal_data_unique() const;
  void _internal_set_data_unique(bool value);
  public:

  // bool le_right = 6;
  void clear_le_right();
  bool le_right() const;
  void set_le_right(bool value);
  private:
  bool _internal_le_right() const;
  void _internal_set_le_right(bool value);
  public:

  // bool lt_right = 7;
  void clear_lt_right();
  bool lt_right() const;
  void set_lt_right(bool value);
  private:
  bool _internal_lt_right() const;
  void _internal_set_lt_right(bool value);
  public:

  // bool check_from_right = 8;
  void clear_check_from_right();
  bool check_from_right() const;
  void set_check_from_right(bool value);
  private:
  bool _internal_check_from_right() const;
  void _internal_set_check_from_right(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TOOL.CheckLabelCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> range_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::CheckLabelCommandNum > num_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::CheckLabelCommandRef > ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_field_;
  bool key_;
  bool empty_skip_;
  bool data_not_empty_;
  bool data_unique_;
  bool le_right_;
  bool lt_right_;
  bool check_from_right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tools_2eproto;
};
// -------------------------------------------------------------------

class CheckLabelCommandRef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TOOL.CheckLabelCommandRef) */ {
 public:
  inline CheckLabelCommandRef() : CheckLabelCommandRef(nullptr) {}
  ~CheckLabelCommandRef() override;
  explicit constexpr CheckLabelCommandRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckLabelCommandRef(const CheckLabelCommandRef& from);
  CheckLabelCommandRef(CheckLabelCommandRef&& from) noexcept
    : CheckLabelCommandRef() {
    *this = ::std::move(from);
  }

  inline CheckLabelCommandRef& operator=(const CheckLabelCommandRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckLabelCommandRef& operator=(CheckLabelCommandRef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckLabelCommandRef& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckLabelCommandRef* internal_default_instance() {
    return reinterpret_cast<const CheckLabelCommandRef*>(
               &_CheckLabelCommandRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CheckLabelCommandRef& a, CheckLabelCommandRef& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckLabelCommandRef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckLabelCommandRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckLabelCommandRef* New() const final {
    return CreateMaybeMessage<CheckLabelCommandRef>(nullptr);
  }

  CheckLabelCommandRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckLabelCommandRef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckLabelCommandRef& from);
  void MergeFrom(const CheckLabelCommandRef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckLabelCommandRef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TOOL.CheckLabelCommandRef";
  }
  protected:
  explicit CheckLabelCommandRef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 1,
    kFieldFieldNumber = 2,
    kApplyFieldNumber = 3,
  };
  // string table = 1;
  void clear_table();
  const std::string& table() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table();
  std::string* release_table();
  void set_allocated_table(std::string* table);
  private:
  const std::string& _internal_table() const;
  void _internal_set_table(const std::string& value);
  std::string* _internal_mutable_table();
  public:

  // string field = 2;
  void clear_field();
  const std::string& field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field();
  std::string* release_field();
  void set_allocated_field(std::string* field);
  private:
  const std::string& _internal_field() const;
  void _internal_set_field(const std::string& value);
  std::string* _internal_mutable_field();
  public:

  // string apply = 3;
  void clear_apply();
  const std::string& apply() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apply(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apply();
  std::string* release_apply();
  void set_allocated_apply(std::string* apply);
  private:
  const std::string& _internal_apply() const;
  void _internal_set_apply(const std::string& value);
  std::string* _internal_mutable_apply();
  public:

  // @@protoc_insertion_point(class_scope:TOOL.CheckLabelCommandRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tools_2eproto;
};
// -------------------------------------------------------------------

class CheckLabelCommandNum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TOOL.CheckLabelCommandNum) */ {
 public:
  inline CheckLabelCommandNum() : CheckLabelCommandNum(nullptr) {}
  ~CheckLabelCommandNum() override;
  explicit constexpr CheckLabelCommandNum(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckLabelCommandNum(const CheckLabelCommandNum& from);
  CheckLabelCommandNum(CheckLabelCommandNum&& from) noexcept
    : CheckLabelCommandNum() {
    *this = ::std::move(from);
  }

  inline CheckLabelCommandNum& operator=(const CheckLabelCommandNum& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckLabelCommandNum& operator=(CheckLabelCommandNum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckLabelCommandNum& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckLabelCommandNum* internal_default_instance() {
    return reinterpret_cast<const CheckLabelCommandNum*>(
               &_CheckLabelCommandNum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CheckLabelCommandNum& a, CheckLabelCommandNum& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckLabelCommandNum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckLabelCommandNum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckLabelCommandNum* New() const final {
    return CreateMaybeMessage<CheckLabelCommandNum>(nullptr);
  }

  CheckLabelCommandNum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckLabelCommandNum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckLabelCommandNum& from);
  void MergeFrom(const CheckLabelCommandNum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckLabelCommandNum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TOOL.CheckLabelCommandNum";
  }
  protected:
  explicit CheckLabelCommandNum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 1,
    kApplyFieldNumber = 2,
  };
  // string range = 1;
  void clear_range();
  const std::string& range() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_range(ArgT0&& arg0, ArgT... args);
  std::string* mutable_range();
  std::string* release_range();
  void set_allocated_range(std::string* range);
  private:
  const std::string& _internal_range() const;
  void _internal_set_range(const std::string& value);
  std::string* _internal_mutable_range();
  public:

  // string apply = 2;
  void clear_apply();
  const std::string& apply() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apply(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apply();
  std::string* release_apply();
  void set_allocated_apply(std::string* apply);
  private:
  const std::string& _internal_apply() const;
  void _internal_set_apply(const std::string& value);
  std::string* _internal_mutable_apply();
  public:

  // @@protoc_insertion_point(class_scope:TOOL.CheckLabelCommandNum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tools_2eproto;
};
// -------------------------------------------------------------------

class XlsxDataArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TOOL.XlsxDataArray) */ {
 public:
  inline XlsxDataArray() : XlsxDataArray(nullptr) {}
  ~XlsxDataArray() override;
  explicit constexpr XlsxDataArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XlsxDataArray(const XlsxDataArray& from);
  XlsxDataArray(XlsxDataArray&& from) noexcept
    : XlsxDataArray() {
    *this = ::std::move(from);
  }

  inline XlsxDataArray& operator=(const XlsxDataArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline XlsxDataArray& operator=(XlsxDataArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XlsxDataArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const XlsxDataArray* internal_default_instance() {
    return reinterpret_cast<const XlsxDataArray*>(
               &_XlsxDataArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(XlsxDataArray& a, XlsxDataArray& b) {
    a.Swap(&b);
  }
  inline void Swap(XlsxDataArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XlsxDataArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XlsxDataArray* New() const final {
    return CreateMaybeMessage<XlsxDataArray>(nullptr);
  }

  XlsxDataArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XlsxDataArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XlsxDataArray& from);
  void MergeFrom(const XlsxDataArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XlsxDataArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TOOL.XlsxDataArray";
  }
  protected:
  explicit XlsxDataArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated string values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // @@protoc_insertion_point(class_scope:TOOL.XlsxDataArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tools_2eproto;
};
// -------------------------------------------------------------------

class XlsxValue_StructValueEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<XlsxValue_StructValueEntry_DoNotUse, 
    std::string, ::TOOL::XlsxValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<XlsxValue_StructValueEntry_DoNotUse, 
    std::string, ::TOOL::XlsxValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  XlsxValue_StructValueEntry_DoNotUse();
  explicit constexpr XlsxValue_StructValueEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit XlsxValue_StructValueEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const XlsxValue_StructValueEntry_DoNotUse& other);
  static const XlsxValue_StructValueEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XlsxValue_StructValueEntry_DoNotUse*>(&_XlsxValue_StructValueEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TOOL.XlsxValue.StructValueEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class XlsxValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TOOL.XlsxValue) */ {
 public:
  inline XlsxValue() : XlsxValue(nullptr) {}
  ~XlsxValue() override;
  explicit constexpr XlsxValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XlsxValue(const XlsxValue& from);
  XlsxValue(XlsxValue&& from) noexcept
    : XlsxValue() {
    *this = ::std::move(from);
  }

  inline XlsxValue& operator=(const XlsxValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline XlsxValue& operator=(XlsxValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XlsxValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const XlsxValue* internal_default_instance() {
    return reinterpret_cast<const XlsxValue*>(
               &_XlsxValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(XlsxValue& a, XlsxValue& b) {
    a.Swap(&b);
  }
  inline void Swap(XlsxValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XlsxValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XlsxValue* New() const final {
    return CreateMaybeMessage<XlsxValue>(nullptr);
  }

  XlsxValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XlsxValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XlsxValue& from);
  void MergeFrom(const XlsxValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XlsxValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TOOL.XlsxValue";
  }
  protected:
  explicit XlsxValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kStructValueFieldNumber = 3,
    kFieldFieldNumber = 1,
  };
  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // map<string, .TOOL.XlsxValue> struct_value = 3;
  int struct_value_size() const;
  private:
  int _internal_struct_value_size() const;
  public:
  void clear_struct_value();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >&
      _internal_struct_value() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >*
      _internal_mutable_struct_value();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >&
      struct_value() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >*
      mutable_struct_value();

  // string field = 1;
  void clear_field();
  const std::string& field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field();
  std::string* release_field();
  void set_allocated_field(std::string* field);
  private:
  const std::string& _internal_field() const;
  void _internal_set_field(const std::string& value);
  std::string* _internal_mutable_field();
  public:

  // @@protoc_insertion_point(class_scope:TOOL.XlsxValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      XlsxValue_StructValueEntry_DoNotUse,
      std::string, ::TOOL::XlsxValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> struct_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tools_2eproto;
};
// -------------------------------------------------------------------

class XlsxValueMap_ValueMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<XlsxValueMap_ValueMapEntry_DoNotUse, 
    std::string, ::TOOL::XlsxValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<XlsxValueMap_ValueMapEntry_DoNotUse, 
    std::string, ::TOOL::XlsxValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  XlsxValueMap_ValueMapEntry_DoNotUse();
  explicit constexpr XlsxValueMap_ValueMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit XlsxValueMap_ValueMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const XlsxValueMap_ValueMapEntry_DoNotUse& other);
  static const XlsxValueMap_ValueMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XlsxValueMap_ValueMapEntry_DoNotUse*>(&_XlsxValueMap_ValueMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TOOL.XlsxValueMap.ValueMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class XlsxValueMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TOOL.XlsxValueMap) */ {
 public:
  inline XlsxValueMap() : XlsxValueMap(nullptr) {}
  ~XlsxValueMap() override;
  explicit constexpr XlsxValueMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XlsxValueMap(const XlsxValueMap& from);
  XlsxValueMap(XlsxValueMap&& from) noexcept
    : XlsxValueMap() {
    *this = ::std::move(from);
  }

  inline XlsxValueMap& operator=(const XlsxValueMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline XlsxValueMap& operator=(XlsxValueMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XlsxValueMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const XlsxValueMap* internal_default_instance() {
    return reinterpret_cast<const XlsxValueMap*>(
               &_XlsxValueMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(XlsxValueMap& a, XlsxValueMap& b) {
    a.Swap(&b);
  }
  inline void Swap(XlsxValueMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XlsxValueMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XlsxValueMap* New() const final {
    return CreateMaybeMessage<XlsxValueMap>(nullptr);
  }

  XlsxValueMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XlsxValueMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XlsxValueMap& from);
  void MergeFrom(const XlsxValueMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XlsxValueMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TOOL.XlsxValueMap";
  }
  protected:
  explicit XlsxValueMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kValueMapFieldNumber = 1,
  };
  // map<string, .TOOL.XlsxValue> value_map = 1;
  int value_map_size() const;
  private:
  int _internal_value_map_size() const;
  public:
  void clear_value_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >&
      _internal_value_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >*
      _internal_mutable_value_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >&
      value_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >*
      mutable_value_map();

  // @@protoc_insertion_point(class_scope:TOOL.XlsxValueMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      XlsxValueMap_ValueMapEntry_DoNotUse,
      std::string, ::TOOL::XlsxValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> value_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tools_2eproto;
};
// -------------------------------------------------------------------

class XlsxData_ChecklabelMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<XlsxData_ChecklabelMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::TOOL::CheckLabelCommand,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<XlsxData_ChecklabelMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::TOOL::CheckLabelCommand,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  XlsxData_ChecklabelMapEntry_DoNotUse();
  explicit constexpr XlsxData_ChecklabelMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit XlsxData_ChecklabelMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const XlsxData_ChecklabelMapEntry_DoNotUse& other);
  static const XlsxData_ChecklabelMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XlsxData_ChecklabelMapEntry_DoNotUse*>(&_XlsxData_ChecklabelMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class XlsxData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TOOL.XlsxData) */ {
 public:
  inline XlsxData() : XlsxData(nullptr) {}
  ~XlsxData() override;
  explicit constexpr XlsxData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XlsxData(const XlsxData& from);
  XlsxData(XlsxData&& from) noexcept
    : XlsxData() {
    *this = ::std::move(from);
  }

  inline XlsxData& operator=(const XlsxData& from) {
    CopyFrom(from);
    return *this;
  }
  inline XlsxData& operator=(XlsxData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XlsxData& default_instance() {
    return *internal_default_instance();
  }
  static inline const XlsxData* internal_default_instance() {
    return reinterpret_cast<const XlsxData*>(
               &_XlsxData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(XlsxData& a, XlsxData& b) {
    a.Swap(&b);
  }
  inline void Swap(XlsxData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XlsxData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XlsxData* New() const final {
    return CreateMaybeMessage<XlsxData>(nullptr);
  }

  XlsxData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XlsxData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XlsxData& from);
  void MergeFrom(const XlsxData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XlsxData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TOOL.XlsxData";
  }
  protected:
  explicit XlsxData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFieldListFieldNumber = 2,
    kChecklabelMapFieldNumber = 3,
    kOriginalValueListFieldNumber = 4,
    kProcessedValueListFieldNumber = 5,
    kXlsxNameFieldNumber = 1,
  };
  // repeated string field_list = 2;
  int field_list_size() const;
  private:
  int _internal_field_list_size() const;
  public:
  void clear_field_list();
  const std::string& field_list(int index) const;
  std::string* mutable_field_list(int index);
  void set_field_list(int index, const std::string& value);
  void set_field_list(int index, std::string&& value);
  void set_field_list(int index, const char* value);
  void set_field_list(int index, const char* value, size_t size);
  std::string* add_field_list();
  void add_field_list(const std::string& value);
  void add_field_list(std::string&& value);
  void add_field_list(const char* value);
  void add_field_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& field_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_field_list();
  private:
  const std::string& _internal_field_list(int index) const;
  std::string* _internal_add_field_list();
  public:

  // map<int32, .TOOL.CheckLabelCommand> checklabel_map = 3;
  int checklabel_map_size() const;
  private:
  int _internal_checklabel_map_size() const;
  public:
  void clear_checklabel_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TOOL::CheckLabelCommand >&
      _internal_checklabel_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TOOL::CheckLabelCommand >*
      _internal_mutable_checklabel_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TOOL::CheckLabelCommand >&
      checklabel_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TOOL::CheckLabelCommand >*
      mutable_checklabel_map();

  // repeated .TOOL.XlsxDataArray original_value_list = 4;
  int original_value_list_size() const;
  private:
  int _internal_original_value_list_size() const;
  public:
  void clear_original_value_list();
  ::TOOL::XlsxDataArray* mutable_original_value_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::XlsxDataArray >*
      mutable_original_value_list();
  private:
  const ::TOOL::XlsxDataArray& _internal_original_value_list(int index) const;
  ::TOOL::XlsxDataArray* _internal_add_original_value_list();
  public:
  const ::TOOL::XlsxDataArray& original_value_list(int index) const;
  ::TOOL::XlsxDataArray* add_original_value_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::XlsxDataArray >&
      original_value_list() const;

  // repeated .TOOL.XlsxValueMap processed_value_list = 5;
  int processed_value_list_size() const;
  private:
  int _internal_processed_value_list_size() const;
  public:
  void clear_processed_value_list();
  ::TOOL::XlsxValueMap* mutable_processed_value_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::XlsxValueMap >*
      mutable_processed_value_list();
  private:
  const ::TOOL::XlsxValueMap& _internal_processed_value_list(int index) const;
  ::TOOL::XlsxValueMap* _internal_add_processed_value_list();
  public:
  const ::TOOL::XlsxValueMap& processed_value_list(int index) const;
  ::TOOL::XlsxValueMap* add_processed_value_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::XlsxValueMap >&
      processed_value_list() const;

  // string xlsxName = 1;
  void clear_xlsxname();
  const std::string& xlsxname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xlsxname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xlsxname();
  std::string* release_xlsxname();
  void set_allocated_xlsxname(std::string* xlsxname);
  private:
  const std::string& _internal_xlsxname() const;
  void _internal_set_xlsxname(const std::string& value);
  std::string* _internal_mutable_xlsxname();
  public:

  // @@protoc_insertion_point(class_scope:TOOL.XlsxData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> field_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      XlsxData_ChecklabelMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::TOOL::CheckLabelCommand,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> checklabel_map_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::XlsxDataArray > original_value_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::XlsxValueMap > processed_value_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xlsxname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tools_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckLabel

// string check_label = 1;
inline void CheckLabel::clear_check_label() {
  check_label_.ClearToEmpty();
}
inline const std::string& CheckLabel::check_label() const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabel.check_label)
  return _internal_check_label();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CheckLabel::set_check_label(ArgT0&& arg0, ArgT... args) {
 
 check_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TOOL.CheckLabel.check_label)
}
inline std::string* CheckLabel::mutable_check_label() {
  // @@protoc_insertion_point(field_mutable:TOOL.CheckLabel.check_label)
  return _internal_mutable_check_label();
}
inline const std::string& CheckLabel::_internal_check_label() const {
  return check_label_.Get();
}
inline void CheckLabel::_internal_set_check_label(const std::string& value) {
  
  check_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CheckLabel::_internal_mutable_check_label() {
  
  return check_label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckLabel::release_check_label() {
  // @@protoc_insertion_point(field_release:TOOL.CheckLabel.check_label)
  return check_label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckLabel::set_allocated_check_label(std::string* check_label) {
  if (check_label != nullptr) {
    
  } else {
    
  }
  check_label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), check_label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TOOL.CheckLabel.check_label)
}

// string check_string = 2;
inline void CheckLabel::clear_check_string() {
  check_string_.ClearToEmpty();
}
inline const std::string& CheckLabel::check_string() const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabel.check_string)
  return _internal_check_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CheckLabel::set_check_string(ArgT0&& arg0, ArgT... args) {
 
 check_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TOOL.CheckLabel.check_string)
}
inline std::string* CheckLabel::mutable_check_string() {
  // @@protoc_insertion_point(field_mutable:TOOL.CheckLabel.check_string)
  return _internal_mutable_check_string();
}
inline const std::string& CheckLabel::_internal_check_string() const {
  return check_string_.Get();
}
inline void CheckLabel::_internal_set_check_string(const std::string& value) {
  
  check_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CheckLabel::_internal_mutable_check_string() {
  
  return check_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckLabel::release_check_string() {
  // @@protoc_insertion_point(field_release:TOOL.CheckLabel.check_string)
  return check_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckLabel::set_allocated_check_string(std::string* check_string) {
  if (check_string != nullptr) {
    
  } else {
    
  }
  check_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), check_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TOOL.CheckLabel.check_string)
}

// -------------------------------------------------------------------

// CheckLabelArray

// repeated .TOOL.CheckLabel check_label_array = 1;
inline int CheckLabelArray::_internal_check_label_array_size() const {
  return check_label_array_.size();
}
inline int CheckLabelArray::check_label_array_size() const {
  return _internal_check_label_array_size();
}
inline void CheckLabelArray::clear_check_label_array() {
  check_label_array_.Clear();
}
inline ::TOOL::CheckLabel* CheckLabelArray::mutable_check_label_array(int index) {
  // @@protoc_insertion_point(field_mutable:TOOL.CheckLabelArray.check_label_array)
  return check_label_array_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::CheckLabel >*
CheckLabelArray::mutable_check_label_array() {
  // @@protoc_insertion_point(field_mutable_list:TOOL.CheckLabelArray.check_label_array)
  return &check_label_array_;
}
inline const ::TOOL::CheckLabel& CheckLabelArray::_internal_check_label_array(int index) const {
  return check_label_array_.Get(index);
}
inline const ::TOOL::CheckLabel& CheckLabelArray::check_label_array(int index) const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelArray.check_label_array)
  return _internal_check_label_array(index);
}
inline ::TOOL::CheckLabel* CheckLabelArray::_internal_add_check_label_array() {
  return check_label_array_.Add();
}
inline ::TOOL::CheckLabel* CheckLabelArray::add_check_label_array() {
  // @@protoc_insertion_point(field_add:TOOL.CheckLabelArray.check_label_array)
  return _internal_add_check_label_array();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::CheckLabel >&
CheckLabelArray::check_label_array() const {
  // @@protoc_insertion_point(field_list:TOOL.CheckLabelArray.check_label_array)
  return check_label_array_;
}

// -------------------------------------------------------------------

// CheckLabelCommand

// bool key = 1;
inline void CheckLabelCommand::clear_key() {
  key_ = false;
}
inline bool CheckLabelCommand::_internal_key() const {
  return key_;
}
inline bool CheckLabelCommand::key() const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommand.key)
  return _internal_key();
}
inline void CheckLabelCommand::_internal_set_key(bool value) {
  
  key_ = value;
}
inline void CheckLabelCommand::set_key(bool value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:TOOL.CheckLabelCommand.key)
}

// bool empty_skip = 2;
inline void CheckLabelCommand::clear_empty_skip() {
  empty_skip_ = false;
}
inline bool CheckLabelCommand::_internal_empty_skip() const {
  return empty_skip_;
}
inline bool CheckLabelCommand::empty_skip() const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommand.empty_skip)
  return _internal_empty_skip();
}
inline void CheckLabelCommand::_internal_set_empty_skip(bool value) {
  
  empty_skip_ = value;
}
inline void CheckLabelCommand::set_empty_skip(bool value) {
  _internal_set_empty_skip(value);
  // @@protoc_insertion_point(field_set:TOOL.CheckLabelCommand.empty_skip)
}

// bool data_not_empty = 3;
inline void CheckLabelCommand::clear_data_not_empty() {
  data_not_empty_ = false;
}
inline bool CheckLabelCommand::_internal_data_not_empty() const {
  return data_not_empty_;
}
inline bool CheckLabelCommand::data_not_empty() const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommand.data_not_empty)
  return _internal_data_not_empty();
}
inline void CheckLabelCommand::_internal_set_data_not_empty(bool value) {
  
  data_not_empty_ = value;
}
inline void CheckLabelCommand::set_data_not_empty(bool value) {
  _internal_set_data_not_empty(value);
  // @@protoc_insertion_point(field_set:TOOL.CheckLabelCommand.data_not_empty)
}

// bool data_unique = 4;
inline void CheckLabelCommand::clear_data_unique() {
  data_unique_ = false;
}
inline bool CheckLabelCommand::_internal_data_unique() const {
  return data_unique_;
}
inline bool CheckLabelCommand::data_unique() const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommand.data_unique)
  return _internal_data_unique();
}
inline void CheckLabelCommand::_internal_set_data_unique(bool value) {
  
  data_unique_ = value;
}
inline void CheckLabelCommand::set_data_unique(bool value) {
  _internal_set_data_unique(value);
  // @@protoc_insertion_point(field_set:TOOL.CheckLabelCommand.data_unique)
}

// string unique = 5;
inline void CheckLabelCommand::clear_unique() {
  unique_.ClearToEmpty();
}
inline const std::string& CheckLabelCommand::unique() const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommand.unique)
  return _internal_unique();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CheckLabelCommand::set_unique(ArgT0&& arg0, ArgT... args) {
 
 unique_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TOOL.CheckLabelCommand.unique)
}
inline std::string* CheckLabelCommand::mutable_unique() {
  // @@protoc_insertion_point(field_mutable:TOOL.CheckLabelCommand.unique)
  return _internal_mutable_unique();
}
inline const std::string& CheckLabelCommand::_internal_unique() const {
  return unique_.Get();
}
inline void CheckLabelCommand::_internal_set_unique(const std::string& value) {
  
  unique_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CheckLabelCommand::_internal_mutable_unique() {
  
  return unique_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckLabelCommand::release_unique() {
  // @@protoc_insertion_point(field_release:TOOL.CheckLabelCommand.unique)
  return unique_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckLabelCommand::set_allocated_unique(std::string* unique) {
  if (unique != nullptr) {
    
  } else {
    
  }
  unique_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TOOL.CheckLabelCommand.unique)
}

// bool le_right = 6;
inline void CheckLabelCommand::clear_le_right() {
  le_right_ = false;
}
inline bool CheckLabelCommand::_internal_le_right() const {
  return le_right_;
}
inline bool CheckLabelCommand::le_right() const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommand.le_right)
  return _internal_le_right();
}
inline void CheckLabelCommand::_internal_set_le_right(bool value) {
  
  le_right_ = value;
}
inline void CheckLabelCommand::set_le_right(bool value) {
  _internal_set_le_right(value);
  // @@protoc_insertion_point(field_set:TOOL.CheckLabelCommand.le_right)
}

// bool lt_right = 7;
inline void CheckLabelCommand::clear_lt_right() {
  lt_right_ = false;
}
inline bool CheckLabelCommand::_internal_lt_right() const {
  return lt_right_;
}
inline bool CheckLabelCommand::lt_right() const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommand.lt_right)
  return _internal_lt_right();
}
inline void CheckLabelCommand::_internal_set_lt_right(bool value) {
  
  lt_right_ = value;
}
inline void CheckLabelCommand::set_lt_right(bool value) {
  _internal_set_lt_right(value);
  // @@protoc_insertion_point(field_set:TOOL.CheckLabelCommand.lt_right)
}

// bool check_from_right = 8;
inline void CheckLabelCommand::clear_check_from_right() {
  check_from_right_ = false;
}
inline bool CheckLabelCommand::_internal_check_from_right() const {
  return check_from_right_;
}
inline bool CheckLabelCommand::check_from_right() const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommand.check_from_right)
  return _internal_check_from_right();
}
inline void CheckLabelCommand::_internal_set_check_from_right(bool value) {
  
  check_from_right_ = value;
}
inline void CheckLabelCommand::set_check_from_right(bool value) {
  _internal_set_check_from_right(value);
  // @@protoc_insertion_point(field_set:TOOL.CheckLabelCommand.check_from_right)
}

// string unique_field = 9;
inline void CheckLabelCommand::clear_unique_field() {
  unique_field_.ClearToEmpty();
}
inline const std::string& CheckLabelCommand::unique_field() const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommand.unique_field)
  return _internal_unique_field();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CheckLabelCommand::set_unique_field(ArgT0&& arg0, ArgT... args) {
 
 unique_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TOOL.CheckLabelCommand.unique_field)
}
inline std::string* CheckLabelCommand::mutable_unique_field() {
  // @@protoc_insertion_point(field_mutable:TOOL.CheckLabelCommand.unique_field)
  return _internal_mutable_unique_field();
}
inline const std::string& CheckLabelCommand::_internal_unique_field() const {
  return unique_field_.Get();
}
inline void CheckLabelCommand::_internal_set_unique_field(const std::string& value) {
  
  unique_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CheckLabelCommand::_internal_mutable_unique_field() {
  
  return unique_field_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckLabelCommand::release_unique_field() {
  // @@protoc_insertion_point(field_release:TOOL.CheckLabelCommand.unique_field)
  return unique_field_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckLabelCommand::set_allocated_unique_field(std::string* unique_field) {
  if (unique_field != nullptr) {
    
  } else {
    
  }
  unique_field_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_field,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TOOL.CheckLabelCommand.unique_field)
}

// repeated string range = 10;
inline int CheckLabelCommand::_internal_range_size() const {
  return range_.size();
}
inline int CheckLabelCommand::range_size() const {
  return _internal_range_size();
}
inline void CheckLabelCommand::clear_range() {
  range_.Clear();
}
inline std::string* CheckLabelCommand::add_range() {
  // @@protoc_insertion_point(field_add_mutable:TOOL.CheckLabelCommand.range)
  return _internal_add_range();
}
inline const std::string& CheckLabelCommand::_internal_range(int index) const {
  return range_.Get(index);
}
inline const std::string& CheckLabelCommand::range(int index) const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommand.range)
  return _internal_range(index);
}
inline std::string* CheckLabelCommand::mutable_range(int index) {
  // @@protoc_insertion_point(field_mutable:TOOL.CheckLabelCommand.range)
  return range_.Mutable(index);
}
inline void CheckLabelCommand::set_range(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TOOL.CheckLabelCommand.range)
  range_.Mutable(index)->assign(value);
}
inline void CheckLabelCommand::set_range(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TOOL.CheckLabelCommand.range)
  range_.Mutable(index)->assign(std::move(value));
}
inline void CheckLabelCommand::set_range(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  range_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TOOL.CheckLabelCommand.range)
}
inline void CheckLabelCommand::set_range(int index, const char* value, size_t size) {
  range_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TOOL.CheckLabelCommand.range)
}
inline std::string* CheckLabelCommand::_internal_add_range() {
  return range_.Add();
}
inline void CheckLabelCommand::add_range(const std::string& value) {
  range_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TOOL.CheckLabelCommand.range)
}
inline void CheckLabelCommand::add_range(std::string&& value) {
  range_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TOOL.CheckLabelCommand.range)
}
inline void CheckLabelCommand::add_range(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  range_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TOOL.CheckLabelCommand.range)
}
inline void CheckLabelCommand::add_range(const char* value, size_t size) {
  range_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TOOL.CheckLabelCommand.range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CheckLabelCommand::range() const {
  // @@protoc_insertion_point(field_list:TOOL.CheckLabelCommand.range)
  return range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CheckLabelCommand::mutable_range() {
  // @@protoc_insertion_point(field_mutable_list:TOOL.CheckLabelCommand.range)
  return &range_;
}

// repeated .TOOL.CheckLabelCommandNum num = 11;
inline int CheckLabelCommand::_internal_num_size() const {
  return num_.size();
}
inline int CheckLabelCommand::num_size() const {
  return _internal_num_size();
}
inline void CheckLabelCommand::clear_num() {
  num_.Clear();
}
inline ::TOOL::CheckLabelCommandNum* CheckLabelCommand::mutable_num(int index) {
  // @@protoc_insertion_point(field_mutable:TOOL.CheckLabelCommand.num)
  return num_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::CheckLabelCommandNum >*
CheckLabelCommand::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:TOOL.CheckLabelCommand.num)
  return &num_;
}
inline const ::TOOL::CheckLabelCommandNum& CheckLabelCommand::_internal_num(int index) const {
  return num_.Get(index);
}
inline const ::TOOL::CheckLabelCommandNum& CheckLabelCommand::num(int index) const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommand.num)
  return _internal_num(index);
}
inline ::TOOL::CheckLabelCommandNum* CheckLabelCommand::_internal_add_num() {
  return num_.Add();
}
inline ::TOOL::CheckLabelCommandNum* CheckLabelCommand::add_num() {
  // @@protoc_insertion_point(field_add:TOOL.CheckLabelCommand.num)
  return _internal_add_num();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::CheckLabelCommandNum >&
CheckLabelCommand::num() const {
  // @@protoc_insertion_point(field_list:TOOL.CheckLabelCommand.num)
  return num_;
}

// repeated .TOOL.CheckLabelCommandRef ref = 12;
inline int CheckLabelCommand::_internal_ref_size() const {
  return ref_.size();
}
inline int CheckLabelCommand::ref_size() const {
  return _internal_ref_size();
}
inline void CheckLabelCommand::clear_ref() {
  ref_.Clear();
}
inline ::TOOL::CheckLabelCommandRef* CheckLabelCommand::mutable_ref(int index) {
  // @@protoc_insertion_point(field_mutable:TOOL.CheckLabelCommand.ref)
  return ref_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::CheckLabelCommandRef >*
CheckLabelCommand::mutable_ref() {
  // @@protoc_insertion_point(field_mutable_list:TOOL.CheckLabelCommand.ref)
  return &ref_;
}
inline const ::TOOL::CheckLabelCommandRef& CheckLabelCommand::_internal_ref(int index) const {
  return ref_.Get(index);
}
inline const ::TOOL::CheckLabelCommandRef& CheckLabelCommand::ref(int index) const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommand.ref)
  return _internal_ref(index);
}
inline ::TOOL::CheckLabelCommandRef* CheckLabelCommand::_internal_add_ref() {
  return ref_.Add();
}
inline ::TOOL::CheckLabelCommandRef* CheckLabelCommand::add_ref() {
  // @@protoc_insertion_point(field_add:TOOL.CheckLabelCommand.ref)
  return _internal_add_ref();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::CheckLabelCommandRef >&
CheckLabelCommand::ref() const {
  // @@protoc_insertion_point(field_list:TOOL.CheckLabelCommand.ref)
  return ref_;
}

// -------------------------------------------------------------------

// CheckLabelCommandRef

// string table = 1;
inline void CheckLabelCommandRef::clear_table() {
  table_.ClearToEmpty();
}
inline const std::string& CheckLabelCommandRef::table() const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommandRef.table)
  return _internal_table();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CheckLabelCommandRef::set_table(ArgT0&& arg0, ArgT... args) {
 
 table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TOOL.CheckLabelCommandRef.table)
}
inline std::string* CheckLabelCommandRef::mutable_table() {
  // @@protoc_insertion_point(field_mutable:TOOL.CheckLabelCommandRef.table)
  return _internal_mutable_table();
}
inline const std::string& CheckLabelCommandRef::_internal_table() const {
  return table_.Get();
}
inline void CheckLabelCommandRef::_internal_set_table(const std::string& value) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CheckLabelCommandRef::_internal_mutable_table() {
  
  return table_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckLabelCommandRef::release_table() {
  // @@protoc_insertion_point(field_release:TOOL.CheckLabelCommandRef.table)
  return table_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckLabelCommandRef::set_allocated_table(std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TOOL.CheckLabelCommandRef.table)
}

// string field = 2;
inline void CheckLabelCommandRef::clear_field() {
  field_.ClearToEmpty();
}
inline const std::string& CheckLabelCommandRef::field() const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommandRef.field)
  return _internal_field();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CheckLabelCommandRef::set_field(ArgT0&& arg0, ArgT... args) {
 
 field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TOOL.CheckLabelCommandRef.field)
}
inline std::string* CheckLabelCommandRef::mutable_field() {
  // @@protoc_insertion_point(field_mutable:TOOL.CheckLabelCommandRef.field)
  return _internal_mutable_field();
}
inline const std::string& CheckLabelCommandRef::_internal_field() const {
  return field_.Get();
}
inline void CheckLabelCommandRef::_internal_set_field(const std::string& value) {
  
  field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CheckLabelCommandRef::_internal_mutable_field() {
  
  return field_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckLabelCommandRef::release_field() {
  // @@protoc_insertion_point(field_release:TOOL.CheckLabelCommandRef.field)
  return field_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckLabelCommandRef::set_allocated_field(std::string* field) {
  if (field != nullptr) {
    
  } else {
    
  }
  field_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TOOL.CheckLabelCommandRef.field)
}

// string apply = 3;
inline void CheckLabelCommandRef::clear_apply() {
  apply_.ClearToEmpty();
}
inline const std::string& CheckLabelCommandRef::apply() const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommandRef.apply)
  return _internal_apply();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CheckLabelCommandRef::set_apply(ArgT0&& arg0, ArgT... args) {
 
 apply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TOOL.CheckLabelCommandRef.apply)
}
inline std::string* CheckLabelCommandRef::mutable_apply() {
  // @@protoc_insertion_point(field_mutable:TOOL.CheckLabelCommandRef.apply)
  return _internal_mutable_apply();
}
inline const std::string& CheckLabelCommandRef::_internal_apply() const {
  return apply_.Get();
}
inline void CheckLabelCommandRef::_internal_set_apply(const std::string& value) {
  
  apply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CheckLabelCommandRef::_internal_mutable_apply() {
  
  return apply_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckLabelCommandRef::release_apply() {
  // @@protoc_insertion_point(field_release:TOOL.CheckLabelCommandRef.apply)
  return apply_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckLabelCommandRef::set_allocated_apply(std::string* apply) {
  if (apply != nullptr) {
    
  } else {
    
  }
  apply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apply,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TOOL.CheckLabelCommandRef.apply)
}

// -------------------------------------------------------------------

// CheckLabelCommandNum

// string range = 1;
inline void CheckLabelCommandNum::clear_range() {
  range_.ClearToEmpty();
}
inline const std::string& CheckLabelCommandNum::range() const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommandNum.range)
  return _internal_range();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CheckLabelCommandNum::set_range(ArgT0&& arg0, ArgT... args) {
 
 range_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TOOL.CheckLabelCommandNum.range)
}
inline std::string* CheckLabelCommandNum::mutable_range() {
  // @@protoc_insertion_point(field_mutable:TOOL.CheckLabelCommandNum.range)
  return _internal_mutable_range();
}
inline const std::string& CheckLabelCommandNum::_internal_range() const {
  return range_.Get();
}
inline void CheckLabelCommandNum::_internal_set_range(const std::string& value) {
  
  range_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CheckLabelCommandNum::_internal_mutable_range() {
  
  return range_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckLabelCommandNum::release_range() {
  // @@protoc_insertion_point(field_release:TOOL.CheckLabelCommandNum.range)
  return range_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckLabelCommandNum::set_allocated_range(std::string* range) {
  if (range != nullptr) {
    
  } else {
    
  }
  range_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TOOL.CheckLabelCommandNum.range)
}

// string apply = 2;
inline void CheckLabelCommandNum::clear_apply() {
  apply_.ClearToEmpty();
}
inline const std::string& CheckLabelCommandNum::apply() const {
  // @@protoc_insertion_point(field_get:TOOL.CheckLabelCommandNum.apply)
  return _internal_apply();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CheckLabelCommandNum::set_apply(ArgT0&& arg0, ArgT... args) {
 
 apply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TOOL.CheckLabelCommandNum.apply)
}
inline std::string* CheckLabelCommandNum::mutable_apply() {
  // @@protoc_insertion_point(field_mutable:TOOL.CheckLabelCommandNum.apply)
  return _internal_mutable_apply();
}
inline const std::string& CheckLabelCommandNum::_internal_apply() const {
  return apply_.Get();
}
inline void CheckLabelCommandNum::_internal_set_apply(const std::string& value) {
  
  apply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CheckLabelCommandNum::_internal_mutable_apply() {
  
  return apply_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckLabelCommandNum::release_apply() {
  // @@protoc_insertion_point(field_release:TOOL.CheckLabelCommandNum.apply)
  return apply_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckLabelCommandNum::set_allocated_apply(std::string* apply) {
  if (apply != nullptr) {
    
  } else {
    
  }
  apply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apply,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TOOL.CheckLabelCommandNum.apply)
}

// -------------------------------------------------------------------

// XlsxDataArray

// repeated string values = 1;
inline int XlsxDataArray::_internal_values_size() const {
  return values_.size();
}
inline int XlsxDataArray::values_size() const {
  return _internal_values_size();
}
inline void XlsxDataArray::clear_values() {
  values_.Clear();
}
inline std::string* XlsxDataArray::add_values() {
  // @@protoc_insertion_point(field_add_mutable:TOOL.XlsxDataArray.values)
  return _internal_add_values();
}
inline const std::string& XlsxDataArray::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& XlsxDataArray::values(int index) const {
  // @@protoc_insertion_point(field_get:TOOL.XlsxDataArray.values)
  return _internal_values(index);
}
inline std::string* XlsxDataArray::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:TOOL.XlsxDataArray.values)
  return values_.Mutable(index);
}
inline void XlsxDataArray::set_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TOOL.XlsxDataArray.values)
  values_.Mutable(index)->assign(value);
}
inline void XlsxDataArray::set_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TOOL.XlsxDataArray.values)
  values_.Mutable(index)->assign(std::move(value));
}
inline void XlsxDataArray::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TOOL.XlsxDataArray.values)
}
inline void XlsxDataArray::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TOOL.XlsxDataArray.values)
}
inline std::string* XlsxDataArray::_internal_add_values() {
  return values_.Add();
}
inline void XlsxDataArray::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TOOL.XlsxDataArray.values)
}
inline void XlsxDataArray::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TOOL.XlsxDataArray.values)
}
inline void XlsxDataArray::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TOOL.XlsxDataArray.values)
}
inline void XlsxDataArray::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TOOL.XlsxDataArray.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
XlsxDataArray::values() const {
  // @@protoc_insertion_point(field_list:TOOL.XlsxDataArray.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
XlsxDataArray::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:TOOL.XlsxDataArray.values)
  return &values_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// XlsxValue

// string field = 1;
inline void XlsxValue::clear_field() {
  field_.ClearToEmpty();
}
inline const std::string& XlsxValue::field() const {
  // @@protoc_insertion_point(field_get:TOOL.XlsxValue.field)
  return _internal_field();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void XlsxValue::set_field(ArgT0&& arg0, ArgT... args) {
 
 field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TOOL.XlsxValue.field)
}
inline std::string* XlsxValue::mutable_field() {
  // @@protoc_insertion_point(field_mutable:TOOL.XlsxValue.field)
  return _internal_mutable_field();
}
inline const std::string& XlsxValue::_internal_field() const {
  return field_.Get();
}
inline void XlsxValue::_internal_set_field(const std::string& value) {
  
  field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* XlsxValue::_internal_mutable_field() {
  
  return field_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* XlsxValue::release_field() {
  // @@protoc_insertion_point(field_release:TOOL.XlsxValue.field)
  return field_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void XlsxValue::set_allocated_field(std::string* field) {
  if (field != nullptr) {
    
  } else {
    
  }
  field_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TOOL.XlsxValue.field)
}

// repeated string value = 2;
inline int XlsxValue::_internal_value_size() const {
  return value_.size();
}
inline int XlsxValue::value_size() const {
  return _internal_value_size();
}
inline void XlsxValue::clear_value() {
  value_.Clear();
}
inline std::string* XlsxValue::add_value() {
  // @@protoc_insertion_point(field_add_mutable:TOOL.XlsxValue.value)
  return _internal_add_value();
}
inline const std::string& XlsxValue::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& XlsxValue::value(int index) const {
  // @@protoc_insertion_point(field_get:TOOL.XlsxValue.value)
  return _internal_value(index);
}
inline std::string* XlsxValue::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:TOOL.XlsxValue.value)
  return value_.Mutable(index);
}
inline void XlsxValue::set_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TOOL.XlsxValue.value)
  value_.Mutable(index)->assign(value);
}
inline void XlsxValue::set_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TOOL.XlsxValue.value)
  value_.Mutable(index)->assign(std::move(value));
}
inline void XlsxValue::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TOOL.XlsxValue.value)
}
inline void XlsxValue::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TOOL.XlsxValue.value)
}
inline std::string* XlsxValue::_internal_add_value() {
  return value_.Add();
}
inline void XlsxValue::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TOOL.XlsxValue.value)
}
inline void XlsxValue::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TOOL.XlsxValue.value)
}
inline void XlsxValue::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TOOL.XlsxValue.value)
}
inline void XlsxValue::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TOOL.XlsxValue.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
XlsxValue::value() const {
  // @@protoc_insertion_point(field_list:TOOL.XlsxValue.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
XlsxValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:TOOL.XlsxValue.value)
  return &value_;
}

// map<string, .TOOL.XlsxValue> struct_value = 3;
inline int XlsxValue::_internal_struct_value_size() const {
  return struct_value_.size();
}
inline int XlsxValue::struct_value_size() const {
  return _internal_struct_value_size();
}
inline void XlsxValue::clear_struct_value() {
  struct_value_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >&
XlsxValue::_internal_struct_value() const {
  return struct_value_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >&
XlsxValue::struct_value() const {
  // @@protoc_insertion_point(field_map:TOOL.XlsxValue.struct_value)
  return _internal_struct_value();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >*
XlsxValue::_internal_mutable_struct_value() {
  return struct_value_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >*
XlsxValue::mutable_struct_value() {
  // @@protoc_insertion_point(field_mutable_map:TOOL.XlsxValue.struct_value)
  return _internal_mutable_struct_value();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// XlsxValueMap

// map<string, .TOOL.XlsxValue> value_map = 1;
inline int XlsxValueMap::_internal_value_map_size() const {
  return value_map_.size();
}
inline int XlsxValueMap::value_map_size() const {
  return _internal_value_map_size();
}
inline void XlsxValueMap::clear_value_map() {
  value_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >&
XlsxValueMap::_internal_value_map() const {
  return value_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >&
XlsxValueMap::value_map() const {
  // @@protoc_insertion_point(field_map:TOOL.XlsxValueMap.value_map)
  return _internal_value_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >*
XlsxValueMap::_internal_mutable_value_map() {
  return value_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >*
XlsxValueMap::mutable_value_map() {
  // @@protoc_insertion_point(field_mutable_map:TOOL.XlsxValueMap.value_map)
  return _internal_mutable_value_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// XlsxData

// string xlsxName = 1;
inline void XlsxData::clear_xlsxname() {
  xlsxname_.ClearToEmpty();
}
inline const std::string& XlsxData::xlsxname() const {
  // @@protoc_insertion_point(field_get:TOOL.XlsxData.xlsxName)
  return _internal_xlsxname();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void XlsxData::set_xlsxname(ArgT0&& arg0, ArgT... args) {
 
 xlsxname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TOOL.XlsxData.xlsxName)
}
inline std::string* XlsxData::mutable_xlsxname() {
  // @@protoc_insertion_point(field_mutable:TOOL.XlsxData.xlsxName)
  return _internal_mutable_xlsxname();
}
inline const std::string& XlsxData::_internal_xlsxname() const {
  return xlsxname_.Get();
}
inline void XlsxData::_internal_set_xlsxname(const std::string& value) {
  
  xlsxname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* XlsxData::_internal_mutable_xlsxname() {
  
  return xlsxname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* XlsxData::release_xlsxname() {
  // @@protoc_insertion_point(field_release:TOOL.XlsxData.xlsxName)
  return xlsxname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void XlsxData::set_allocated_xlsxname(std::string* xlsxname) {
  if (xlsxname != nullptr) {
    
  } else {
    
  }
  xlsxname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xlsxname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TOOL.XlsxData.xlsxName)
}

// repeated string field_list = 2;
inline int XlsxData::_internal_field_list_size() const {
  return field_list_.size();
}
inline int XlsxData::field_list_size() const {
  return _internal_field_list_size();
}
inline void XlsxData::clear_field_list() {
  field_list_.Clear();
}
inline std::string* XlsxData::add_field_list() {
  // @@protoc_insertion_point(field_add_mutable:TOOL.XlsxData.field_list)
  return _internal_add_field_list();
}
inline const std::string& XlsxData::_internal_field_list(int index) const {
  return field_list_.Get(index);
}
inline const std::string& XlsxData::field_list(int index) const {
  // @@protoc_insertion_point(field_get:TOOL.XlsxData.field_list)
  return _internal_field_list(index);
}
inline std::string* XlsxData::mutable_field_list(int index) {
  // @@protoc_insertion_point(field_mutable:TOOL.XlsxData.field_list)
  return field_list_.Mutable(index);
}
inline void XlsxData::set_field_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TOOL.XlsxData.field_list)
  field_list_.Mutable(index)->assign(value);
}
inline void XlsxData::set_field_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TOOL.XlsxData.field_list)
  field_list_.Mutable(index)->assign(std::move(value));
}
inline void XlsxData::set_field_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TOOL.XlsxData.field_list)
}
inline void XlsxData::set_field_list(int index, const char* value, size_t size) {
  field_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TOOL.XlsxData.field_list)
}
inline std::string* XlsxData::_internal_add_field_list() {
  return field_list_.Add();
}
inline void XlsxData::add_field_list(const std::string& value) {
  field_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TOOL.XlsxData.field_list)
}
inline void XlsxData::add_field_list(std::string&& value) {
  field_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TOOL.XlsxData.field_list)
}
inline void XlsxData::add_field_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TOOL.XlsxData.field_list)
}
inline void XlsxData::add_field_list(const char* value, size_t size) {
  field_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TOOL.XlsxData.field_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
XlsxData::field_list() const {
  // @@protoc_insertion_point(field_list:TOOL.XlsxData.field_list)
  return field_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
XlsxData::mutable_field_list() {
  // @@protoc_insertion_point(field_mutable_list:TOOL.XlsxData.field_list)
  return &field_list_;
}

// map<int32, .TOOL.CheckLabelCommand> checklabel_map = 3;
inline int XlsxData::_internal_checklabel_map_size() const {
  return checklabel_map_.size();
}
inline int XlsxData::checklabel_map_size() const {
  return _internal_checklabel_map_size();
}
inline void XlsxData::clear_checklabel_map() {
  checklabel_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TOOL::CheckLabelCommand >&
XlsxData::_internal_checklabel_map() const {
  return checklabel_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TOOL::CheckLabelCommand >&
XlsxData::checklabel_map() const {
  // @@protoc_insertion_point(field_map:TOOL.XlsxData.checklabel_map)
  return _internal_checklabel_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TOOL::CheckLabelCommand >*
XlsxData::_internal_mutable_checklabel_map() {
  return checklabel_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TOOL::CheckLabelCommand >*
XlsxData::mutable_checklabel_map() {
  // @@protoc_insertion_point(field_mutable_map:TOOL.XlsxData.checklabel_map)
  return _internal_mutable_checklabel_map();
}

// repeated .TOOL.XlsxDataArray original_value_list = 4;
inline int XlsxData::_internal_original_value_list_size() const {
  return original_value_list_.size();
}
inline int XlsxData::original_value_list_size() const {
  return _internal_original_value_list_size();
}
inline void XlsxData::clear_original_value_list() {
  original_value_list_.Clear();
}
inline ::TOOL::XlsxDataArray* XlsxData::mutable_original_value_list(int index) {
  // @@protoc_insertion_point(field_mutable:TOOL.XlsxData.original_value_list)
  return original_value_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::XlsxDataArray >*
XlsxData::mutable_original_value_list() {
  // @@protoc_insertion_point(field_mutable_list:TOOL.XlsxData.original_value_list)
  return &original_value_list_;
}
inline const ::TOOL::XlsxDataArray& XlsxData::_internal_original_value_list(int index) const {
  return original_value_list_.Get(index);
}
inline const ::TOOL::XlsxDataArray& XlsxData::original_value_list(int index) const {
  // @@protoc_insertion_point(field_get:TOOL.XlsxData.original_value_list)
  return _internal_original_value_list(index);
}
inline ::TOOL::XlsxDataArray* XlsxData::_internal_add_original_value_list() {
  return original_value_list_.Add();
}
inline ::TOOL::XlsxDataArray* XlsxData::add_original_value_list() {
  // @@protoc_insertion_point(field_add:TOOL.XlsxData.original_value_list)
  return _internal_add_original_value_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::XlsxDataArray >&
XlsxData::original_value_list() const {
  // @@protoc_insertion_point(field_list:TOOL.XlsxData.original_value_list)
  return original_value_list_;
}

// repeated .TOOL.XlsxValueMap processed_value_list = 5;
inline int XlsxData::_internal_processed_value_list_size() const {
  return processed_value_list_.size();
}
inline int XlsxData::processed_value_list_size() const {
  return _internal_processed_value_list_size();
}
inline void XlsxData::clear_processed_value_list() {
  processed_value_list_.Clear();
}
inline ::TOOL::XlsxValueMap* XlsxData::mutable_processed_value_list(int index) {
  // @@protoc_insertion_point(field_mutable:TOOL.XlsxData.processed_value_list)
  return processed_value_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::XlsxValueMap >*
XlsxData::mutable_processed_value_list() {
  // @@protoc_insertion_point(field_mutable_list:TOOL.XlsxData.processed_value_list)
  return &processed_value_list_;
}
inline const ::TOOL::XlsxValueMap& XlsxData::_internal_processed_value_list(int index) const {
  return processed_value_list_.Get(index);
}
inline const ::TOOL::XlsxValueMap& XlsxData::processed_value_list(int index) const {
  // @@protoc_insertion_point(field_get:TOOL.XlsxData.processed_value_list)
  return _internal_processed_value_list(index);
}
inline ::TOOL::XlsxValueMap* XlsxData::_internal_add_processed_value_list() {
  return processed_value_list_.Add();
}
inline ::TOOL::XlsxValueMap* XlsxData::add_processed_value_list() {
  // @@protoc_insertion_point(field_add:TOOL.XlsxData.processed_value_list)
  return _internal_add_processed_value_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TOOL::XlsxValueMap >&
XlsxData::processed_value_list() const {
  // @@protoc_insertion_point(field_list:TOOL.XlsxData.processed_value_list)
  return processed_value_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TOOL

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tools_2eproto
