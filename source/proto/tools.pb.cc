// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tools.proto

#include "tools.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TOOL {
constexpr CheckLabel::CheckLabel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : check_label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , check_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CheckLabelDefaultTypeInternal {
  constexpr CheckLabelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckLabelDefaultTypeInternal() {}
  union {
    CheckLabel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckLabelDefaultTypeInternal _CheckLabel_default_instance_;
constexpr CheckLabelArray::CheckLabelArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : check_label_array_(){}
struct CheckLabelArrayDefaultTypeInternal {
  constexpr CheckLabelArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckLabelArrayDefaultTypeInternal() {}
  union {
    CheckLabelArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckLabelArrayDefaultTypeInternal _CheckLabelArray_default_instance_;
constexpr CheckLabelCommand::CheckLabelCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_()
  , num_()
  , ref_()
  , unique_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unique_field_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(false)
  , empty_skip_(false)
  , data_not_empty_(false)
  , data_unique_(false)
  , le_right_(false)
  , lt_right_(false)
  , check_from_right_(false){}
struct CheckLabelCommandDefaultTypeInternal {
  constexpr CheckLabelCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckLabelCommandDefaultTypeInternal() {}
  union {
    CheckLabelCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckLabelCommandDefaultTypeInternal _CheckLabelCommand_default_instance_;
constexpr CheckLabelCommandRef::CheckLabelCommandRef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , field_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , apply_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CheckLabelCommandRefDefaultTypeInternal {
  constexpr CheckLabelCommandRefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckLabelCommandRefDefaultTypeInternal() {}
  union {
    CheckLabelCommandRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckLabelCommandRefDefaultTypeInternal _CheckLabelCommandRef_default_instance_;
constexpr CheckLabelCommandNum::CheckLabelCommandNum(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , apply_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CheckLabelCommandNumDefaultTypeInternal {
  constexpr CheckLabelCommandNumDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckLabelCommandNumDefaultTypeInternal() {}
  union {
    CheckLabelCommandNum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckLabelCommandNumDefaultTypeInternal _CheckLabelCommandNum_default_instance_;
constexpr XlsxDataArray::XlsxDataArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(){}
struct XlsxDataArrayDefaultTypeInternal {
  constexpr XlsxDataArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XlsxDataArrayDefaultTypeInternal() {}
  union {
    XlsxDataArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XlsxDataArrayDefaultTypeInternal _XlsxDataArray_default_instance_;
constexpr XlsxValue_StructValueEntry_DoNotUse::XlsxValue_StructValueEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct XlsxValue_StructValueEntry_DoNotUseDefaultTypeInternal {
  constexpr XlsxValue_StructValueEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XlsxValue_StructValueEntry_DoNotUseDefaultTypeInternal() {}
  union {
    XlsxValue_StructValueEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XlsxValue_StructValueEntry_DoNotUseDefaultTypeInternal _XlsxValue_StructValueEntry_DoNotUse_default_instance_;
constexpr XlsxValue::XlsxValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_()
  , struct_value_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , field_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct XlsxValueDefaultTypeInternal {
  constexpr XlsxValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XlsxValueDefaultTypeInternal() {}
  union {
    XlsxValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XlsxValueDefaultTypeInternal _XlsxValue_default_instance_;
constexpr XlsxValueMap_ValueMapEntry_DoNotUse::XlsxValueMap_ValueMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct XlsxValueMap_ValueMapEntry_DoNotUseDefaultTypeInternal {
  constexpr XlsxValueMap_ValueMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XlsxValueMap_ValueMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    XlsxValueMap_ValueMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XlsxValueMap_ValueMapEntry_DoNotUseDefaultTypeInternal _XlsxValueMap_ValueMapEntry_DoNotUse_default_instance_;
constexpr XlsxValueMap::XlsxValueMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct XlsxValueMapDefaultTypeInternal {
  constexpr XlsxValueMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XlsxValueMapDefaultTypeInternal() {}
  union {
    XlsxValueMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XlsxValueMapDefaultTypeInternal _XlsxValueMap_default_instance_;
constexpr XlsxData_ChecklabelMapEntry_DoNotUse::XlsxData_ChecklabelMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct XlsxData_ChecklabelMapEntry_DoNotUseDefaultTypeInternal {
  constexpr XlsxData_ChecklabelMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XlsxData_ChecklabelMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    XlsxData_ChecklabelMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XlsxData_ChecklabelMapEntry_DoNotUseDefaultTypeInternal _XlsxData_ChecklabelMapEntry_DoNotUse_default_instance_;
constexpr XlsxData::XlsxData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_list_()
  , checklabel_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , original_value_list_()
  , processed_value_list_()
  , xlsxname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct XlsxDataDefaultTypeInternal {
  constexpr XlsxDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XlsxDataDefaultTypeInternal() {}
  union {
    XlsxData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XlsxDataDefaultTypeInternal _XlsxData_default_instance_;
}  // namespace TOOL
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tools_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tools_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tools_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tools_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabel, check_label_),
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabel, check_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelArray, check_label_array_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommand, key_),
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommand, empty_skip_),
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommand, data_not_empty_),
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommand, data_unique_),
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommand, unique_),
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommand, le_right_),
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommand, lt_right_),
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommand, check_from_right_),
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommand, unique_field_),
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommand, range_),
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommand, num_),
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommand, ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommandRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommandRef, table_),
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommandRef, field_),
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommandRef, apply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommandNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommandNum, range_),
  PROTOBUF_FIELD_OFFSET(::TOOL::CheckLabelCommandNum, apply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxDataArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxDataArray, values_),
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxValue_StructValueEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxValue_StructValueEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxValue_StructValueEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxValue_StructValueEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxValue, field_),
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxValue, value_),
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxValue, struct_value_),
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxValueMap_ValueMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxValueMap_ValueMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxValueMap_ValueMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxValueMap_ValueMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxValueMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxValueMap, value_map_),
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxData_ChecklabelMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxData_ChecklabelMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxData_ChecklabelMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxData_ChecklabelMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxData, xlsxname_),
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxData, field_list_),
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxData, checklabel_map_),
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxData, original_value_list_),
  PROTOBUF_FIELD_OFFSET(::TOOL::XlsxData, processed_value_list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TOOL::CheckLabel)},
  { 7, -1, sizeof(::TOOL::CheckLabelArray)},
  { 13, -1, sizeof(::TOOL::CheckLabelCommand)},
  { 30, -1, sizeof(::TOOL::CheckLabelCommandRef)},
  { 38, -1, sizeof(::TOOL::CheckLabelCommandNum)},
  { 45, -1, sizeof(::TOOL::XlsxDataArray)},
  { 51, 58, sizeof(::TOOL::XlsxValue_StructValueEntry_DoNotUse)},
  { 60, -1, sizeof(::TOOL::XlsxValue)},
  { 68, 75, sizeof(::TOOL::XlsxValueMap_ValueMapEntry_DoNotUse)},
  { 77, -1, sizeof(::TOOL::XlsxValueMap)},
  { 83, 90, sizeof(::TOOL::XlsxData_ChecklabelMapEntry_DoNotUse)},
  { 92, -1, sizeof(::TOOL::XlsxData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TOOL::_CheckLabel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TOOL::_CheckLabelArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TOOL::_CheckLabelCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TOOL::_CheckLabelCommandRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TOOL::_CheckLabelCommandNum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TOOL::_XlsxDataArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TOOL::_XlsxValue_StructValueEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TOOL::_XlsxValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TOOL::_XlsxValueMap_ValueMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TOOL::_XlsxValueMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TOOL::_XlsxData_ChecklabelMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TOOL::_XlsxData_default_instance_),
};

const char descriptor_table_protodef_tools_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013tools.proto\022\004TOOL\"7\n\nCheckLabel\022\023\n\013che"
  "ck_label\030\001 \001(\t\022\024\n\014check_string\030\002 \001(\t\">\n\017"
  "CheckLabelArray\022+\n\021check_label_array\030\001 \003"
  "(\0132\020.TOOL.CheckLabel\"\246\002\n\021CheckLabelComma"
  "nd\022\013\n\003key\030\001 \001(\010\022\022\n\nempty_skip\030\002 \001(\010\022\026\n\016d"
  "ata_not_empty\030\003 \001(\010\022\023\n\013data_unique\030\004 \001(\010"
  "\022\016\n\006unique\030\005 \001(\t\022\020\n\010le_right\030\006 \001(\010\022\020\n\010lt"
  "_right\030\007 \001(\010\022\030\n\020check_from_right\030\010 \001(\010\022\024"
  "\n\014unique_field\030\t \001(\t\022\r\n\005range\030\n \003(\t\022\'\n\003n"
  "um\030\013 \003(\0132\032.TOOL.CheckLabelCommandNum\022\'\n\003"
  "ref\030\014 \003(\0132\032.TOOL.CheckLabelCommandRef\"C\n"
  "\024CheckLabelCommandRef\022\r\n\005table\030\001 \001(\t\022\r\n\005"
  "field\030\002 \001(\t\022\r\n\005apply\030\003 \001(\t\"4\n\024CheckLabel"
  "CommandNum\022\r\n\005range\030\001 \001(\t\022\r\n\005apply\030\002 \001(\t"
  "\"\037\n\rXlsxDataArray\022\016\n\006values\030\001 \003(\t\"\246\001\n\tXl"
  "sxValue\022\r\n\005field\030\001 \001(\t\022\r\n\005value\030\002 \003(\t\0226\n"
  "\014struct_value\030\003 \003(\0132 .TOOL.XlsxValue.Str"
  "uctValueEntry\032C\n\020StructValueEntry\022\013\n\003key"
  "\030\001 \001(\t\022\036\n\005value\030\002 \001(\0132\017.TOOL.XlsxValue:\002"
  "8\001\"\205\001\n\014XlsxValueMap\0223\n\tvalue_map\030\001 \003(\0132 "
  ".TOOL.XlsxValueMap.ValueMapEntry\032@\n\rValu"
  "eMapEntry\022\013\n\003key\030\001 \001(\t\022\036\n\005value\030\002 \001(\0132\017."
  "TOOL.XlsxValue:\0028\001\"\236\002\n\010XlsxData\022\020\n\010xlsxN"
  "ame\030\001 \001(\t\022\022\n\nfield_list\030\002 \003(\t\0229\n\016checkla"
  "bel_map\030\003 \003(\0132!.TOOL.XlsxData.Checklabel"
  "MapEntry\0220\n\023original_value_list\030\004 \003(\0132\023."
  "TOOL.XlsxDataArray\0220\n\024processed_value_li"
  "st\030\005 \003(\0132\022.TOOL.XlsxValueMap\032M\n\022Checklab"
  "elMapEntry\022\013\n\003key\030\001 \001(\005\022&\n\005value\030\002 \001(\0132\027"
  ".TOOL.CheckLabelCommand:\0028\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tools_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tools_2eproto = {
  false, false, 1195, descriptor_table_protodef_tools_2eproto, "tools.proto", 
  &descriptor_table_tools_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_tools_2eproto::offsets,
  file_level_metadata_tools_2eproto, file_level_enum_descriptors_tools_2eproto, file_level_service_descriptors_tools_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tools_2eproto_getter() {
  return &descriptor_table_tools_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tools_2eproto(&descriptor_table_tools_2eproto);
namespace TOOL {

// ===================================================================

class CheckLabel::_Internal {
 public:
};

CheckLabel::CheckLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TOOL.CheckLabel)
}
CheckLabel::CheckLabel(const CheckLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  check_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_check_label().empty()) {
    check_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_check_label(), 
      GetArena());
  }
  check_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_check_string().empty()) {
    check_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_check_string(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TOOL.CheckLabel)
}

void CheckLabel::SharedCtor() {
check_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
check_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CheckLabel::~CheckLabel() {
  // @@protoc_insertion_point(destructor:TOOL.CheckLabel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckLabel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  check_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  check_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckLabel::ArenaDtor(void* object) {
  CheckLabel* _this = reinterpret_cast< CheckLabel* >(object);
  (void)_this;
}
void CheckLabel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:TOOL.CheckLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  check_label_.ClearToEmpty();
  check_string_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckLabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string check_label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_check_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TOOL.CheckLabel.check_label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string check_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_check_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TOOL.CheckLabel.check_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckLabel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TOOL.CheckLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string check_label = 1;
  if (this->check_label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_check_label().data(), static_cast<int>(this->_internal_check_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TOOL.CheckLabel.check_label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_check_label(), target);
  }

  // string check_string = 2;
  if (this->check_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_check_string().data(), static_cast<int>(this->_internal_check_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TOOL.CheckLabel.check_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_check_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TOOL.CheckLabel)
  return target;
}

size_t CheckLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TOOL.CheckLabel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string check_label = 1;
  if (this->check_label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_check_label());
  }

  // string check_string = 2;
  if (this->check_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_check_string());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckLabel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TOOL.CheckLabel)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckLabel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckLabel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TOOL.CheckLabel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TOOL.CheckLabel)
    MergeFrom(*source);
  }
}

void CheckLabel::MergeFrom(const CheckLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TOOL.CheckLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.check_label().size() > 0) {
    _internal_set_check_label(from._internal_check_label());
  }
  if (from.check_string().size() > 0) {
    _internal_set_check_string(from._internal_check_string());
  }
}

void CheckLabel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TOOL.CheckLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckLabel::CopyFrom(const CheckLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TOOL.CheckLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckLabel::IsInitialized() const {
  return true;
}

void CheckLabel::InternalSwap(CheckLabel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  check_label_.Swap(&other->check_label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  check_string_.Swap(&other->check_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckLabel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tools_2eproto_getter, &descriptor_table_tools_2eproto_once,
      file_level_metadata_tools_2eproto[0]);
}

// ===================================================================

class CheckLabelArray::_Internal {
 public:
};

CheckLabelArray::CheckLabelArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  check_label_array_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TOOL.CheckLabelArray)
}
CheckLabelArray::CheckLabelArray(const CheckLabelArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      check_label_array_(from.check_label_array_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TOOL.CheckLabelArray)
}

void CheckLabelArray::SharedCtor() {
}

CheckLabelArray::~CheckLabelArray() {
  // @@protoc_insertion_point(destructor:TOOL.CheckLabelArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckLabelArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CheckLabelArray::ArenaDtor(void* object) {
  CheckLabelArray* _this = reinterpret_cast< CheckLabelArray* >(object);
  (void)_this;
}
void CheckLabelArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckLabelArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckLabelArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TOOL.CheckLabelArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  check_label_array_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckLabelArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TOOL.CheckLabel check_label_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_check_label_array(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckLabelArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TOOL.CheckLabelArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TOOL.CheckLabel check_label_array = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_check_label_array_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_check_label_array(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TOOL.CheckLabelArray)
  return target;
}

size_t CheckLabelArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TOOL.CheckLabelArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TOOL.CheckLabel check_label_array = 1;
  total_size += 1UL * this->_internal_check_label_array_size();
  for (const auto& msg : this->check_label_array_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckLabelArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TOOL.CheckLabelArray)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckLabelArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckLabelArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TOOL.CheckLabelArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TOOL.CheckLabelArray)
    MergeFrom(*source);
  }
}

void CheckLabelArray::MergeFrom(const CheckLabelArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TOOL.CheckLabelArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  check_label_array_.MergeFrom(from.check_label_array_);
}

void CheckLabelArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TOOL.CheckLabelArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckLabelArray::CopyFrom(const CheckLabelArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TOOL.CheckLabelArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckLabelArray::IsInitialized() const {
  return true;
}

void CheckLabelArray::InternalSwap(CheckLabelArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  check_label_array_.InternalSwap(&other->check_label_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckLabelArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tools_2eproto_getter, &descriptor_table_tools_2eproto_once,
      file_level_metadata_tools_2eproto[1]);
}

// ===================================================================

class CheckLabelCommand::_Internal {
 public:
};

CheckLabelCommand::CheckLabelCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  range_(arena),
  num_(arena),
  ref_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TOOL.CheckLabelCommand)
}
CheckLabelCommand::CheckLabelCommand(const CheckLabelCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      range_(from.range_),
      num_(from.num_),
      ref_(from.ref_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unique_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unique().empty()) {
    unique_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique(), 
      GetArena());
  }
  unique_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unique_field().empty()) {
    unique_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_field(), 
      GetArena());
  }
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&check_from_right_) -
    reinterpret_cast<char*>(&key_)) + sizeof(check_from_right_));
  // @@protoc_insertion_point(copy_constructor:TOOL.CheckLabelCommand)
}

void CheckLabelCommand::SharedCtor() {
unique_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unique_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&check_from_right_) -
    reinterpret_cast<char*>(&key_)) + sizeof(check_from_right_));
}

CheckLabelCommand::~CheckLabelCommand() {
  // @@protoc_insertion_point(destructor:TOOL.CheckLabelCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckLabelCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unique_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckLabelCommand::ArenaDtor(void* object) {
  CheckLabelCommand* _this = reinterpret_cast< CheckLabelCommand* >(object);
  (void)_this;
}
void CheckLabelCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckLabelCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckLabelCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:TOOL.CheckLabelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_.Clear();
  num_.Clear();
  ref_.Clear();
  unique_.ClearToEmpty();
  unique_field_.ClearToEmpty();
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_from_right_) -
      reinterpret_cast<char*>(&key_)) + sizeof(check_from_right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckLabelCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool empty_skip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          empty_skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool data_not_empty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          data_not_empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool data_unique = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          data_unique_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unique = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_unique();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TOOL.CheckLabelCommand.unique"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool le_right = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          le_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lt_right = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          lt_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool check_from_right = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          check_from_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unique_field = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_unique_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TOOL.CheckLabelCommand.unique_field"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string range = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_range();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TOOL.CheckLabelCommand.range"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TOOL.CheckLabelCommandNum num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_num(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TOOL.CheckLabelCommandRef ref = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckLabelCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TOOL.CheckLabelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_key(), target);
  }

  // bool empty_skip = 2;
  if (this->empty_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_empty_skip(), target);
  }

  // bool data_not_empty = 3;
  if (this->data_not_empty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_data_not_empty(), target);
  }

  // bool data_unique = 4;
  if (this->data_unique() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_data_unique(), target);
  }

  // string unique = 5;
  if (this->unique().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unique().data(), static_cast<int>(this->_internal_unique().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TOOL.CheckLabelCommand.unique");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_unique(), target);
  }

  // bool le_right = 6;
  if (this->le_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_le_right(), target);
  }

  // bool lt_right = 7;
  if (this->lt_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_lt_right(), target);
  }

  // bool check_from_right = 8;
  if (this->check_from_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_check_from_right(), target);
  }

  // string unique_field = 9;
  if (this->unique_field().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unique_field().data(), static_cast<int>(this->_internal_unique_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TOOL.CheckLabelCommand.unique_field");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_unique_field(), target);
  }

  // repeated string range = 10;
  for (int i = 0, n = this->_internal_range_size(); i < n; i++) {
    const auto& s = this->_internal_range(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TOOL.CheckLabelCommand.range");
    target = stream->WriteString(10, s, target);
  }

  // repeated .TOOL.CheckLabelCommandNum num = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_num_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_num(i), target, stream);
  }

  // repeated .TOOL.CheckLabelCommandRef ref = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ref_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_ref(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TOOL.CheckLabelCommand)
  return target;
}

size_t CheckLabelCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TOOL.CheckLabelCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string range = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(range_.size());
  for (int i = 0, n = range_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      range_.Get(i));
  }

  // repeated .TOOL.CheckLabelCommandNum num = 11;
  total_size += 1UL * this->_internal_num_size();
  for (const auto& msg : this->num_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TOOL.CheckLabelCommandRef ref = 12;
  total_size += 1UL * this->_internal_ref_size();
  for (const auto& msg : this->ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string unique = 5;
  if (this->unique().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unique());
  }

  // string unique_field = 9;
  if (this->unique_field().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unique_field());
  }

  // bool key = 1;
  if (this->key() != 0) {
    total_size += 1 + 1;
  }

  // bool empty_skip = 2;
  if (this->empty_skip() != 0) {
    total_size += 1 + 1;
  }

  // bool data_not_empty = 3;
  if (this->data_not_empty() != 0) {
    total_size += 1 + 1;
  }

  // bool data_unique = 4;
  if (this->data_unique() != 0) {
    total_size += 1 + 1;
  }

  // bool le_right = 6;
  if (this->le_right() != 0) {
    total_size += 1 + 1;
  }

  // bool lt_right = 7;
  if (this->lt_right() != 0) {
    total_size += 1 + 1;
  }

  // bool check_from_right = 8;
  if (this->check_from_right() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckLabelCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TOOL.CheckLabelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckLabelCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckLabelCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TOOL.CheckLabelCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TOOL.CheckLabelCommand)
    MergeFrom(*source);
  }
}

void CheckLabelCommand::MergeFrom(const CheckLabelCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TOOL.CheckLabelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  range_.MergeFrom(from.range_);
  num_.MergeFrom(from.num_);
  ref_.MergeFrom(from.ref_);
  if (from.unique().size() > 0) {
    _internal_set_unique(from._internal_unique());
  }
  if (from.unique_field().size() > 0) {
    _internal_set_unique_field(from._internal_unique_field());
  }
  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.empty_skip() != 0) {
    _internal_set_empty_skip(from._internal_empty_skip());
  }
  if (from.data_not_empty() != 0) {
    _internal_set_data_not_empty(from._internal_data_not_empty());
  }
  if (from.data_unique() != 0) {
    _internal_set_data_unique(from._internal_data_unique());
  }
  if (from.le_right() != 0) {
    _internal_set_le_right(from._internal_le_right());
  }
  if (from.lt_right() != 0) {
    _internal_set_lt_right(from._internal_lt_right());
  }
  if (from.check_from_right() != 0) {
    _internal_set_check_from_right(from._internal_check_from_right());
  }
}

void CheckLabelCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TOOL.CheckLabelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckLabelCommand::CopyFrom(const CheckLabelCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TOOL.CheckLabelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckLabelCommand::IsInitialized() const {
  return true;
}

void CheckLabelCommand::InternalSwap(CheckLabelCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  range_.InternalSwap(&other->range_);
  num_.InternalSwap(&other->num_);
  ref_.InternalSwap(&other->ref_);
  unique_.Swap(&other->unique_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unique_field_.Swap(&other->unique_field_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckLabelCommand, check_from_right_)
      + sizeof(CheckLabelCommand::check_from_right_)
      - PROTOBUF_FIELD_OFFSET(CheckLabelCommand, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckLabelCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tools_2eproto_getter, &descriptor_table_tools_2eproto_once,
      file_level_metadata_tools_2eproto[2]);
}

// ===================================================================

class CheckLabelCommandRef::_Internal {
 public:
};

CheckLabelCommandRef::CheckLabelCommandRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TOOL.CheckLabelCommandRef)
}
CheckLabelCommandRef::CheckLabelCommandRef(const CheckLabelCommandRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table().empty()) {
    table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table(), 
      GetArena());
  }
  field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field().empty()) {
    field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field(), 
      GetArena());
  }
  apply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_apply().empty()) {
    apply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_apply(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TOOL.CheckLabelCommandRef)
}

void CheckLabelCommandRef::SharedCtor() {
table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
apply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CheckLabelCommandRef::~CheckLabelCommandRef() {
  // @@protoc_insertion_point(destructor:TOOL.CheckLabelCommandRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckLabelCommandRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckLabelCommandRef::ArenaDtor(void* object) {
  CheckLabelCommandRef* _this = reinterpret_cast< CheckLabelCommandRef* >(object);
  (void)_this;
}
void CheckLabelCommandRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckLabelCommandRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckLabelCommandRef::Clear() {
// @@protoc_insertion_point(message_clear_start:TOOL.CheckLabelCommandRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmpty();
  field_.ClearToEmpty();
  apply_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckLabelCommandRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TOOL.CheckLabelCommandRef.table"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TOOL.CheckLabelCommandRef.field"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string apply = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_apply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TOOL.CheckLabelCommandRef.apply"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckLabelCommandRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TOOL.CheckLabelCommandRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TOOL.CheckLabelCommandRef.table");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table(), target);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TOOL.CheckLabelCommandRef.field");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_field(), target);
  }

  // string apply = 3;
  if (this->apply().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_apply().data(), static_cast<int>(this->_internal_apply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TOOL.CheckLabelCommandRef.apply");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_apply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TOOL.CheckLabelCommandRef)
  return target;
}

size_t CheckLabelCommandRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TOOL.CheckLabelCommandRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table());
  }

  // string field = 2;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  // string apply = 3;
  if (this->apply().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apply());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckLabelCommandRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TOOL.CheckLabelCommandRef)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckLabelCommandRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckLabelCommandRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TOOL.CheckLabelCommandRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TOOL.CheckLabelCommandRef)
    MergeFrom(*source);
  }
}

void CheckLabelCommandRef::MergeFrom(const CheckLabelCommandRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TOOL.CheckLabelCommandRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {
    _internal_set_table(from._internal_table());
  }
  if (from.field().size() > 0) {
    _internal_set_field(from._internal_field());
  }
  if (from.apply().size() > 0) {
    _internal_set_apply(from._internal_apply());
  }
}

void CheckLabelCommandRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TOOL.CheckLabelCommandRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckLabelCommandRef::CopyFrom(const CheckLabelCommandRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TOOL.CheckLabelCommandRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckLabelCommandRef::IsInitialized() const {
  return true;
}

void CheckLabelCommandRef::InternalSwap(CheckLabelCommandRef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field_.Swap(&other->field_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  apply_.Swap(&other->apply_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckLabelCommandRef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tools_2eproto_getter, &descriptor_table_tools_2eproto_once,
      file_level_metadata_tools_2eproto[3]);
}

// ===================================================================

class CheckLabelCommandNum::_Internal {
 public:
};

CheckLabelCommandNum::CheckLabelCommandNum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TOOL.CheckLabelCommandNum)
}
CheckLabelCommandNum::CheckLabelCommandNum(const CheckLabelCommandNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  range_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_range().empty()) {
    range_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_range(), 
      GetArena());
  }
  apply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_apply().empty()) {
    apply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_apply(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TOOL.CheckLabelCommandNum)
}

void CheckLabelCommandNum::SharedCtor() {
range_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
apply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CheckLabelCommandNum::~CheckLabelCommandNum() {
  // @@protoc_insertion_point(destructor:TOOL.CheckLabelCommandNum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckLabelCommandNum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  range_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckLabelCommandNum::ArenaDtor(void* object) {
  CheckLabelCommandNum* _this = reinterpret_cast< CheckLabelCommandNum* >(object);
  (void)_this;
}
void CheckLabelCommandNum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckLabelCommandNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckLabelCommandNum::Clear() {
// @@protoc_insertion_point(message_clear_start:TOOL.CheckLabelCommandNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_.ClearToEmpty();
  apply_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckLabelCommandNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_range();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TOOL.CheckLabelCommandNum.range"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string apply = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_apply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TOOL.CheckLabelCommandNum.apply"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckLabelCommandNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TOOL.CheckLabelCommandNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string range = 1;
  if (this->range().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_range().data(), static_cast<int>(this->_internal_range().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TOOL.CheckLabelCommandNum.range");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_range(), target);
  }

  // string apply = 2;
  if (this->apply().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_apply().data(), static_cast<int>(this->_internal_apply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TOOL.CheckLabelCommandNum.apply");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_apply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TOOL.CheckLabelCommandNum)
  return target;
}

size_t CheckLabelCommandNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TOOL.CheckLabelCommandNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string range = 1;
  if (this->range().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_range());
  }

  // string apply = 2;
  if (this->apply().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apply());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckLabelCommandNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TOOL.CheckLabelCommandNum)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckLabelCommandNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckLabelCommandNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TOOL.CheckLabelCommandNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TOOL.CheckLabelCommandNum)
    MergeFrom(*source);
  }
}

void CheckLabelCommandNum::MergeFrom(const CheckLabelCommandNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TOOL.CheckLabelCommandNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.range().size() > 0) {
    _internal_set_range(from._internal_range());
  }
  if (from.apply().size() > 0) {
    _internal_set_apply(from._internal_apply());
  }
}

void CheckLabelCommandNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TOOL.CheckLabelCommandNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckLabelCommandNum::CopyFrom(const CheckLabelCommandNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TOOL.CheckLabelCommandNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckLabelCommandNum::IsInitialized() const {
  return true;
}

void CheckLabelCommandNum::InternalSwap(CheckLabelCommandNum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  range_.Swap(&other->range_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  apply_.Swap(&other->apply_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckLabelCommandNum::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tools_2eproto_getter, &descriptor_table_tools_2eproto_once,
      file_level_metadata_tools_2eproto[4]);
}

// ===================================================================

class XlsxDataArray::_Internal {
 public:
};

XlsxDataArray::XlsxDataArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TOOL.XlsxDataArray)
}
XlsxDataArray::XlsxDataArray(const XlsxDataArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TOOL.XlsxDataArray)
}

void XlsxDataArray::SharedCtor() {
}

XlsxDataArray::~XlsxDataArray() {
  // @@protoc_insertion_point(destructor:TOOL.XlsxDataArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void XlsxDataArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void XlsxDataArray::ArenaDtor(void* object) {
  XlsxDataArray* _this = reinterpret_cast< XlsxDataArray* >(object);
  (void)_this;
}
void XlsxDataArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XlsxDataArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XlsxDataArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TOOL.XlsxDataArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XlsxDataArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TOOL.XlsxDataArray.values"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XlsxDataArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TOOL.XlsxDataArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TOOL.XlsxDataArray.values");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TOOL.XlsxDataArray)
  return target;
}

size_t XlsxDataArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TOOL.XlsxDataArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      values_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XlsxDataArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TOOL.XlsxDataArray)
  GOOGLE_DCHECK_NE(&from, this);
  const XlsxDataArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XlsxDataArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TOOL.XlsxDataArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TOOL.XlsxDataArray)
    MergeFrom(*source);
  }
}

void XlsxDataArray::MergeFrom(const XlsxDataArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TOOL.XlsxDataArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void XlsxDataArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TOOL.XlsxDataArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XlsxDataArray::CopyFrom(const XlsxDataArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TOOL.XlsxDataArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XlsxDataArray::IsInitialized() const {
  return true;
}

void XlsxDataArray::InternalSwap(XlsxDataArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XlsxDataArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tools_2eproto_getter, &descriptor_table_tools_2eproto_once,
      file_level_metadata_tools_2eproto[5]);
}

// ===================================================================

XlsxValue_StructValueEntry_DoNotUse::XlsxValue_StructValueEntry_DoNotUse() {}
XlsxValue_StructValueEntry_DoNotUse::XlsxValue_StructValueEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void XlsxValue_StructValueEntry_DoNotUse::MergeFrom(const XlsxValue_StructValueEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata XlsxValue_StructValueEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tools_2eproto_getter, &descriptor_table_tools_2eproto_once,
      file_level_metadata_tools_2eproto[6]);
}
void XlsxValue_StructValueEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class XlsxValue::_Internal {
 public:
};

XlsxValue::XlsxValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena),
  struct_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TOOL.XlsxValue)
}
XlsxValue::XlsxValue(const XlsxValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  struct_value_.MergeFrom(from.struct_value_);
  field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field().empty()) {
    field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TOOL.XlsxValue)
}

void XlsxValue::SharedCtor() {
field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

XlsxValue::~XlsxValue() {
  // @@protoc_insertion_point(destructor:TOOL.XlsxValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void XlsxValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void XlsxValue::ArenaDtor(void* object) {
  XlsxValue* _this = reinterpret_cast< XlsxValue* >(object);
  (void)_this;
}
void XlsxValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XlsxValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XlsxValue::Clear() {
// @@protoc_insertion_point(message_clear_start:TOOL.XlsxValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  struct_value_.Clear();
  field_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XlsxValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TOOL.XlsxValue.field"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TOOL.XlsxValue.value"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .TOOL.XlsxValue> struct_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&struct_value_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XlsxValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TOOL.XlsxValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (this->field().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TOOL.XlsxValue.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TOOL.XlsxValue.value");
    target = stream->WriteString(2, s, target);
  }

  // map<string, .TOOL.XlsxValue> struct_value = 3;
  if (!this->_internal_struct_value().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "TOOL.XlsxValue.StructValueEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_struct_value().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_struct_value().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >::const_iterator
          it = this->_internal_struct_value().begin();
          it != this->_internal_struct_value().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = XlsxValue_StructValueEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >::const_iterator
          it = this->_internal_struct_value().begin();
          it != this->_internal_struct_value().end(); ++it) {
        target = XlsxValue_StructValueEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TOOL.XlsxValue)
  return target;
}

size_t XlsxValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TOOL.XlsxValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  // map<string, .TOOL.XlsxValue> struct_value = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_struct_value_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >::const_iterator
      it = this->_internal_struct_value().begin();
      it != this->_internal_struct_value().end(); ++it) {
    total_size += XlsxValue_StructValueEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string field = 1;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XlsxValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TOOL.XlsxValue)
  GOOGLE_DCHECK_NE(&from, this);
  const XlsxValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XlsxValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TOOL.XlsxValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TOOL.XlsxValue)
    MergeFrom(*source);
  }
}

void XlsxValue::MergeFrom(const XlsxValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TOOL.XlsxValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  struct_value_.MergeFrom(from.struct_value_);
  if (from.field().size() > 0) {
    _internal_set_field(from._internal_field());
  }
}

void XlsxValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TOOL.XlsxValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XlsxValue::CopyFrom(const XlsxValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TOOL.XlsxValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XlsxValue::IsInitialized() const {
  return true;
}

void XlsxValue::InternalSwap(XlsxValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
  struct_value_.Swap(&other->struct_value_);
  field_.Swap(&other->field_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata XlsxValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tools_2eproto_getter, &descriptor_table_tools_2eproto_once,
      file_level_metadata_tools_2eproto[7]);
}

// ===================================================================

XlsxValueMap_ValueMapEntry_DoNotUse::XlsxValueMap_ValueMapEntry_DoNotUse() {}
XlsxValueMap_ValueMapEntry_DoNotUse::XlsxValueMap_ValueMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void XlsxValueMap_ValueMapEntry_DoNotUse::MergeFrom(const XlsxValueMap_ValueMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata XlsxValueMap_ValueMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tools_2eproto_getter, &descriptor_table_tools_2eproto_once,
      file_level_metadata_tools_2eproto[8]);
}
void XlsxValueMap_ValueMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class XlsxValueMap::_Internal {
 public:
};

XlsxValueMap::XlsxValueMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TOOL.XlsxValueMap)
}
XlsxValueMap::XlsxValueMap(const XlsxValueMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_map_.MergeFrom(from.value_map_);
  // @@protoc_insertion_point(copy_constructor:TOOL.XlsxValueMap)
}

void XlsxValueMap::SharedCtor() {
}

XlsxValueMap::~XlsxValueMap() {
  // @@protoc_insertion_point(destructor:TOOL.XlsxValueMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void XlsxValueMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void XlsxValueMap::ArenaDtor(void* object) {
  XlsxValueMap* _this = reinterpret_cast< XlsxValueMap* >(object);
  (void)_this;
}
void XlsxValueMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XlsxValueMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XlsxValueMap::Clear() {
// @@protoc_insertion_point(message_clear_start:TOOL.XlsxValueMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XlsxValueMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .TOOL.XlsxValue> value_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&value_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XlsxValueMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TOOL.XlsxValueMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .TOOL.XlsxValue> value_map = 1;
  if (!this->_internal_value_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "TOOL.XlsxValueMap.ValueMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_value_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_value_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >::const_iterator
          it = this->_internal_value_map().begin();
          it != this->_internal_value_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = XlsxValueMap_ValueMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >::const_iterator
          it = this->_internal_value_map().begin();
          it != this->_internal_value_map().end(); ++it) {
        target = XlsxValueMap_ValueMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TOOL.XlsxValueMap)
  return target;
}

size_t XlsxValueMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TOOL.XlsxValueMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .TOOL.XlsxValue> value_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_value_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TOOL::XlsxValue >::const_iterator
      it = this->_internal_value_map().begin();
      it != this->_internal_value_map().end(); ++it) {
    total_size += XlsxValueMap_ValueMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XlsxValueMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TOOL.XlsxValueMap)
  GOOGLE_DCHECK_NE(&from, this);
  const XlsxValueMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XlsxValueMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TOOL.XlsxValueMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TOOL.XlsxValueMap)
    MergeFrom(*source);
  }
}

void XlsxValueMap::MergeFrom(const XlsxValueMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TOOL.XlsxValueMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_map_.MergeFrom(from.value_map_);
}

void XlsxValueMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TOOL.XlsxValueMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XlsxValueMap::CopyFrom(const XlsxValueMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TOOL.XlsxValueMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XlsxValueMap::IsInitialized() const {
  return true;
}

void XlsxValueMap::InternalSwap(XlsxValueMap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_map_.Swap(&other->value_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XlsxValueMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tools_2eproto_getter, &descriptor_table_tools_2eproto_once,
      file_level_metadata_tools_2eproto[9]);
}

// ===================================================================

XlsxData_ChecklabelMapEntry_DoNotUse::XlsxData_ChecklabelMapEntry_DoNotUse() {}
XlsxData_ChecklabelMapEntry_DoNotUse::XlsxData_ChecklabelMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void XlsxData_ChecklabelMapEntry_DoNotUse::MergeFrom(const XlsxData_ChecklabelMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata XlsxData_ChecklabelMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tools_2eproto_getter, &descriptor_table_tools_2eproto_once,
      file_level_metadata_tools_2eproto[10]);
}
void XlsxData_ChecklabelMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class XlsxData::_Internal {
 public:
};

XlsxData::XlsxData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_list_(arena),
  checklabel_map_(arena),
  original_value_list_(arena),
  processed_value_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TOOL.XlsxData)
}
XlsxData::XlsxData(const XlsxData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_list_(from.field_list_),
      original_value_list_(from.original_value_list_),
      processed_value_list_(from.processed_value_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  checklabel_map_.MergeFrom(from.checklabel_map_);
  xlsxname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_xlsxname().empty()) {
    xlsxname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_xlsxname(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TOOL.XlsxData)
}

void XlsxData::SharedCtor() {
xlsxname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

XlsxData::~XlsxData() {
  // @@protoc_insertion_point(destructor:TOOL.XlsxData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void XlsxData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  xlsxname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void XlsxData::ArenaDtor(void* object) {
  XlsxData* _this = reinterpret_cast< XlsxData* >(object);
  (void)_this;
}
void XlsxData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XlsxData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XlsxData::Clear() {
// @@protoc_insertion_point(message_clear_start:TOOL.XlsxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_list_.Clear();
  checklabel_map_.Clear();
  original_value_list_.Clear();
  processed_value_list_.Clear();
  xlsxname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XlsxData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string xlsxName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_xlsxname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TOOL.XlsxData.xlsxName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string field_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TOOL.XlsxData.field_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .TOOL.CheckLabelCommand> checklabel_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&checklabel_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TOOL.XlsxDataArray original_value_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_original_value_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TOOL.XlsxValueMap processed_value_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_processed_value_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XlsxData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TOOL.XlsxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string xlsxName = 1;
  if (this->xlsxname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xlsxname().data(), static_cast<int>(this->_internal_xlsxname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TOOL.XlsxData.xlsxName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_xlsxname(), target);
  }

  // repeated string field_list = 2;
  for (int i = 0, n = this->_internal_field_list_size(); i < n; i++) {
    const auto& s = this->_internal_field_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TOOL.XlsxData.field_list");
    target = stream->WriteString(2, s, target);
  }

  // map<int32, .TOOL.CheckLabelCommand> checklabel_map = 3;
  if (!this->_internal_checklabel_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TOOL::CheckLabelCommand >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_checklabel_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_checklabel_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TOOL::CheckLabelCommand >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TOOL::CheckLabelCommand >::const_iterator
          it = this->_internal_checklabel_map().begin();
          it != this->_internal_checklabel_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = XlsxData_ChecklabelMapEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TOOL::CheckLabelCommand >::const_iterator
          it = this->_internal_checklabel_map().begin();
          it != this->_internal_checklabel_map().end(); ++it) {
        target = XlsxData_ChecklabelMapEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  // repeated .TOOL.XlsxDataArray original_value_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_original_value_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_original_value_list(i), target, stream);
  }

  // repeated .TOOL.XlsxValueMap processed_value_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_processed_value_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_processed_value_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TOOL.XlsxData)
  return target;
}

size_t XlsxData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TOOL.XlsxData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string field_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_list_.size());
  for (int i = 0, n = field_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      field_list_.Get(i));
  }

  // map<int32, .TOOL.CheckLabelCommand> checklabel_map = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_checklabel_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TOOL::CheckLabelCommand >::const_iterator
      it = this->_internal_checklabel_map().begin();
      it != this->_internal_checklabel_map().end(); ++it) {
    total_size += XlsxData_ChecklabelMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .TOOL.XlsxDataArray original_value_list = 4;
  total_size += 1UL * this->_internal_original_value_list_size();
  for (const auto& msg : this->original_value_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TOOL.XlsxValueMap processed_value_list = 5;
  total_size += 1UL * this->_internal_processed_value_list_size();
  for (const auto& msg : this->processed_value_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string xlsxName = 1;
  if (this->xlsxname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xlsxname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XlsxData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TOOL.XlsxData)
  GOOGLE_DCHECK_NE(&from, this);
  const XlsxData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XlsxData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TOOL.XlsxData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TOOL.XlsxData)
    MergeFrom(*source);
  }
}

void XlsxData::MergeFrom(const XlsxData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TOOL.XlsxData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_list_.MergeFrom(from.field_list_);
  checklabel_map_.MergeFrom(from.checklabel_map_);
  original_value_list_.MergeFrom(from.original_value_list_);
  processed_value_list_.MergeFrom(from.processed_value_list_);
  if (from.xlsxname().size() > 0) {
    _internal_set_xlsxname(from._internal_xlsxname());
  }
}

void XlsxData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TOOL.XlsxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XlsxData::CopyFrom(const XlsxData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TOOL.XlsxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XlsxData::IsInitialized() const {
  return true;
}

void XlsxData::InternalSwap(XlsxData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  field_list_.InternalSwap(&other->field_list_);
  checklabel_map_.Swap(&other->checklabel_map_);
  original_value_list_.InternalSwap(&other->original_value_list_);
  processed_value_list_.InternalSwap(&other->processed_value_list_);
  xlsxname_.Swap(&other->xlsxname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata XlsxData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tools_2eproto_getter, &descriptor_table_tools_2eproto_once,
      file_level_metadata_tools_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TOOL
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TOOL::CheckLabel* Arena::CreateMaybeMessage< ::TOOL::CheckLabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TOOL::CheckLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::TOOL::CheckLabelArray* Arena::CreateMaybeMessage< ::TOOL::CheckLabelArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TOOL::CheckLabelArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TOOL::CheckLabelCommand* Arena::CreateMaybeMessage< ::TOOL::CheckLabelCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TOOL::CheckLabelCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::TOOL::CheckLabelCommandRef* Arena::CreateMaybeMessage< ::TOOL::CheckLabelCommandRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TOOL::CheckLabelCommandRef >(arena);
}
template<> PROTOBUF_NOINLINE ::TOOL::CheckLabelCommandNum* Arena::CreateMaybeMessage< ::TOOL::CheckLabelCommandNum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TOOL::CheckLabelCommandNum >(arena);
}
template<> PROTOBUF_NOINLINE ::TOOL::XlsxDataArray* Arena::CreateMaybeMessage< ::TOOL::XlsxDataArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TOOL::XlsxDataArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TOOL::XlsxValue_StructValueEntry_DoNotUse* Arena::CreateMaybeMessage< ::TOOL::XlsxValue_StructValueEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TOOL::XlsxValue_StructValueEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::TOOL::XlsxValue* Arena::CreateMaybeMessage< ::TOOL::XlsxValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TOOL::XlsxValue >(arena);
}
template<> PROTOBUF_NOINLINE ::TOOL::XlsxValueMap_ValueMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::TOOL::XlsxValueMap_ValueMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TOOL::XlsxValueMap_ValueMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::TOOL::XlsxValueMap* Arena::CreateMaybeMessage< ::TOOL::XlsxValueMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TOOL::XlsxValueMap >(arena);
}
template<> PROTOBUF_NOINLINE ::TOOL::XlsxData_ChecklabelMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::TOOL::XlsxData_ChecklabelMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TOOL::XlsxData_ChecklabelMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::TOOL::XlsxData* Arena::CreateMaybeMessage< ::TOOL::XlsxData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TOOL::XlsxData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
